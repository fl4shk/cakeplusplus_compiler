!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/249c3c0/
AbstractSyntaxTree	abstract_syntax_tree_class.cpp	/^AbstractSyntaxTree::AbstractSyntaxTree()$/;"	kind:f	class:AbstractSyntaxTree	signature:()
AbstractSyntaxTree	abstract_syntax_tree_class.hpp	/^	AbstractSyntaxTree();$/;"	kind:p	class:AbstractSyntaxTree	access:public	signature:()
AbstractSyntaxTree	abstract_syntax_tree_class.hpp	/^class AbstractSyntaxTree$/;"	kind:c
AbstractSyntaxTree::AbstractSyntaxTree	abstract_syntax_tree_class.cpp	/^AbstractSyntaxTree::AbstractSyntaxTree()$/;"	kind:f	class:AbstractSyntaxTree	signature:()
AbstractSyntaxTree::AbstractSyntaxTree	abstract_syntax_tree_class.hpp	/^	AbstractSyntaxTree();$/;"	kind:p	class:AbstractSyntaxTree	access:public	signature:()
AbstractSyntaxTree::__nodes	abstract_syntax_tree_class.hpp	/^	std::vector<std::unique_ptr<AstNode>> __nodes;$/;"	kind:m	class:AbstractSyntaxTree	typeref:typename:std::vector<std::unique_ptr<AstNode>>	access:protected
AbstractSyntaxTree::__program	abstract_syntax_tree_class.hpp	/^	AstNode* __program = nullptr;$/;"	kind:m	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:protected
AbstractSyntaxTree::gen_assign	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_assign(AstNode* some_ident_node, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node,AstNode * some_expr)
AbstractSyntaxTree::gen_assign	abstract_syntax_tree_class.hpp	/^	AstNode* gen_assign(AstNode* some_ident_node, AstNode* some_expr);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node,AstNode * some_expr)
AbstractSyntaxTree::gen_builtin_typename	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_builtin_typename$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(char * some_typename)
AbstractSyntaxTree::gen_builtin_typename	abstract_syntax_tree_class.hpp	/^	AstNode* gen_builtin_typename(char* some_typename);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(char * some_typename)
AbstractSyntaxTree::gen_constant	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_constant(int some_num)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(int some_num)
AbstractSyntaxTree::gen_constant	abstract_syntax_tree_class.hpp	/^	AstNode* gen_constant(int some_num);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(int some_num)
AbstractSyntaxTree::gen_do_while_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_do_while_statement$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_statement,AstNode * some_expr)
AbstractSyntaxTree::gen_do_while_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_do_while_statement(AstNode* some_statement,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_statement,AstNode * some_expr)
AbstractSyntaxTree::gen_finished_binop	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_finished_binop$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_incomplete_binop,AstNode * a,AstNode * b)
AbstractSyntaxTree::gen_finished_binop	abstract_syntax_tree_class.hpp	/^	AstNode* gen_finished_binop(AstNode* some_incomplete_binop, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_incomplete_binop,AstNode * a,AstNode * b)
AbstractSyntaxTree::gen_getter_by_val	abstract_syntax_tree_class.hpp	/^	gen_getter_by_val(program);$/;"	kind:p	class:AbstractSyntaxTree	access:public	signature:(program)
AbstractSyntaxTree::gen_ident	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_ident(const char* some_ident)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(const char * some_ident)
AbstractSyntaxTree::gen_ident	abstract_syntax_tree_class.hpp	/^	AstNode* gen_ident(const char* some_ident);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(const char * some_ident)
AbstractSyntaxTree::gen_if_chain_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_if_chain_statement(AstNode* some_expr,$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_expr,AstNode * some_statement_if,AstNode * some_statement_else)
AbstractSyntaxTree::gen_if_chain_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_if_chain_statement(AstNode* some_expr,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_expr,AstNode * some_statement_if,AstNode * some_statement_else)
AbstractSyntaxTree::gen_if_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_if_statement(AstNode* some_expr, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_expr,AstNode * some_statement)
AbstractSyntaxTree::gen_if_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_if_statement(AstNode* some_expr, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_expr,AstNode * some_statement)
AbstractSyntaxTree::gen_indexed_assign	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_indexed_assign(AstNode* some_ident_node,$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node,AstNode * some_index,AstNode * some_rhs)
AbstractSyntaxTree::gen_indexed_assign	abstract_syntax_tree_class.hpp	/^	AstNode* gen_indexed_assign(AstNode* some_ident_node,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node,AstNode * some_index,AstNode * some_rhs)
AbstractSyntaxTree::gen_indexed_load	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_indexed_load(AstNode* some_ident_node, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node,AstNode * some_index)
AbstractSyntaxTree::gen_indexed_load	abstract_syntax_tree_class.hpp	/^	AstNode* gen_indexed_load(AstNode* some_ident_node, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node,AstNode * some_index)
AbstractSyntaxTree::gen_list_ident	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_list_ident()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
AbstractSyntaxTree::gen_list_ident	abstract_syntax_tree_class.hpp	/^	AstNode* gen_list_ident();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
AbstractSyntaxTree::gen_list_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_list_statement()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
AbstractSyntaxTree::gen_list_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_list_statement();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
AbstractSyntaxTree::gen_load	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_load(AstNode* some_ident_node)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node)
AbstractSyntaxTree::gen_load	abstract_syntax_tree_class.hpp	/^	AstNode* gen_load(AstNode* some_ident_node);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node)
AbstractSyntaxTree::gen_mkscope	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_mkscope()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
AbstractSyntaxTree::gen_mkscope	abstract_syntax_tree_class.hpp	/^	AstNode* gen_mkscope();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
AbstractSyntaxTree::gen_program	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_program(AstNode* some_statements)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_statements)
AbstractSyntaxTree::gen_program	abstract_syntax_tree_class.hpp	/^	AstNode* gen_program(AstNode* some_statements);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_statements)
AbstractSyntaxTree::gen_rmscope	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_rmscope()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
AbstractSyntaxTree::gen_rmscope	abstract_syntax_tree_class.hpp	/^	AstNode* gen_rmscope();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
AbstractSyntaxTree::gen_statements	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_statements(AstNode* some_mkscope, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_mkscope,AstNode * some_list_statement,AstNode * some_rmscope)
AbstractSyntaxTree::gen_statements	abstract_syntax_tree_class.hpp	/^	AstNode* gen_statements(AstNode* some_mkscope, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_mkscope,AstNode * some_list_statement,AstNode * some_rmscope)
AbstractSyntaxTree::gen_var_decl_array	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_var_decl_array$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_dim_node)
AbstractSyntaxTree::gen_var_decl_array	abstract_syntax_tree_class.hpp	/^	AstNode* gen_var_decl_array(AstNode* some_typename_node, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_dim)
AbstractSyntaxTree::gen_var_decl_simple	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_var_decl_simple$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_typename_node,AstNode * some_ident_node)
AbstractSyntaxTree::gen_var_decl_simple	abstract_syntax_tree_class.hpp	/^	AstNode* gen_var_decl_simple(AstNode* some_typename_node, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_typename_node,AstNode * some_ident_node)
AbstractSyntaxTree::gen_var_decl_with_init	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_var_decl_with_init$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_expr)
AbstractSyntaxTree::gen_var_decl_with_init	abstract_syntax_tree_class.hpp	/^	AstNode* gen_var_decl_with_init(AstNode* some_typename_node,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_expr)
AbstractSyntaxTree::gen_while_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_while_statement(AstNode* some_expr,$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_expr,AstNode * some_statement)
AbstractSyntaxTree::gen_while_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_while_statement(AstNode* some_expr,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_expr,AstNode * some_statement)
AbstractSyntaxTree::make_initial_binop_node	abstract_syntax_tree_class.hpp	/^	inline AstNode* make_initial_binop_node()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
AbstractSyntaxTree::mknode	abstract_syntax_tree_class.hpp	/^	inline AstNode* mknode()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:protected	signature:()
AbstractSyntaxTree::print	abstract_syntax_tree_class.hpp	/^	inline void print() const$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:void	access:public	signature:() const
AbstractSyntaxTree::print_json	abstract_syntax_tree_class.hpp	/^	void print_json() const;$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:void	access:public	signature:() const
AbstractSyntaxTree::print_json	abstract_syntax_tree_class_print_funcs.cpp	/^void AbstractSyntaxTree::print_json() const$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:void	signature:() const
AbstractSyntaxTree::~AbstractSyntaxTree	abstract_syntax_tree_class.cpp	/^AbstractSyntaxTree::~AbstractSyntaxTree()$/;"	kind:f	class:AbstractSyntaxTree	signature:()
AbstractSyntaxTree::~AbstractSyntaxTree	abstract_syntax_tree_class.hpp	/^	virtual ~AbstractSyntaxTree();$/;"	kind:p	class:AbstractSyntaxTree	access:public	signature:()
AnyPrintoutBackend	liborangepower_src/misc_output_classes.hpp	/^class AnyPrintoutBackend$/;"	kind:c	namespace:liborangepower::printout_etc
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper()$/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:()
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(Type* s___arr, $/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:(Type * s___arr,const Vec2<size_t> & s_size_2d)
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	access:public	signature:(const Array2dHelper & to_copy)
Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class Array2dHelper$/;"	kind:c	namespace:liborangepower::containers
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:()
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(Type* s___arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(Type * s___arr)
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(const ArrayCsz2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(const ArrayCsz2dHelper & to_copy)
ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class ArrayCsz2dHelper$/;"	kind:c	namespace:liborangepower::containers
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:()
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(Type* s_the_array) : __arr(s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(Type * s_the_array)
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(const ArrayCszHelper & to_copy)
ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayCszHelper$/;"	kind:c	namespace:liborangepower::containers
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper()$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:()
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:(Type * s_the_array,size_t s_size)
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	access:public	signature:(const ArrayHelper & to_copy)
ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayHelper$/;"	kind:c	namespace:liborangepower::containers
AstAssign	specific_ast_node_classes.hpp	/^struct AstAssign : public AstNode$/;"	kind:s	inherits:AstNode
AstAssign::accept	specific_ast_node_classes.cpp	/^void AstAssign::accept(Visitor* v)$/;"	kind:f	class:AstAssign	typeref:typename:void	signature:(Visitor * v)
AstAssign::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstAssign	typeref:typename:void	access:public	signature:(Visitor * v)
AstAssign::expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(1); }$/;"	kind:f	struct:AstAssign	typeref:typename:auto	access:public	signature:()
AstAssign::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstAssign	typeref:typename:auto	access:public	signature:()
AstAssign::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstAssign	typeref:typename:std::string	access:public	signature:() const
AstBinop	specific_ast_node_classes.hpp	/^struct AstBinop : public AstNode$/;"	kind:s	inherits:AstNode
AstBinop::accept	specific_ast_node_classes.cpp	/^void AstBinop::accept(Visitor* v)$/;"	kind:f	class:AstBinop	typeref:typename:void	signature:(Visitor * v)
AstBinop::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstBinop	typeref:typename:void	access:public	signature:(Visitor * v)
AstBinop::arg_a	specific_ast_node_classes.hpp	/^	inline auto arg_a() { return at(0); }$/;"	kind:f	struct:AstBinop	typeref:typename:auto	access:public	signature:()
AstBinop::arg_b	specific_ast_node_classes.hpp	/^	inline auto arg_b() { return at(1); }$/;"	kind:f	struct:AstBinop	typeref:typename:auto	access:public	signature:()
AstBinop::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstBinop	typeref:typename:std::string	access:public	signature:() const
AstBuiltinTypename	specific_ast_node_classes.hpp	/^struct AstBuiltinTypename : public AstNode$/;"	kind:s	inherits:AstNode
AstBuiltinTypename::accept	specific_ast_node_classes.cpp	/^void AstBuiltinTypename::accept(Visitor* v)$/;"	kind:f	class:AstBuiltinTypename	typeref:typename:void	signature:(Visitor * v)
AstBuiltinTypename::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstBuiltinTypename	typeref:typename:void	access:public	signature:(Visitor * v)
AstBuiltinTypename::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstBuiltinTypename	typeref:typename:std::string	access:public	signature:() const
AstConstant	specific_ast_node_classes.hpp	/^struct AstConstant : public AstNode$/;"	kind:s	inherits:AstNode
AstConstant::accept	specific_ast_node_classes.cpp	/^void AstConstant::accept(Visitor* v)$/;"	kind:f	class:AstConstant	typeref:typename:void	signature:(Visitor * v)
AstConstant::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstConstant	typeref:typename:void	access:public	signature:(Visitor * v)
AstConstant::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstConstant	typeref:typename:std::string	access:public	signature:() const
AstDoWhile	specific_ast_node_classes.hpp	/^struct AstDoWhile : public AstNode$/;"	kind:s	inherits:AstNode
AstDoWhile::accept	specific_ast_node_classes.cpp	/^void AstDoWhile::accept(Visitor* v)$/;"	kind:f	class:AstDoWhile	typeref:typename:void	signature:(Visitor * v)
AstDoWhile::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstDoWhile	typeref:typename:void	access:public	signature:(Visitor * v)
AstDoWhile::expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(1); }$/;"	kind:f	struct:AstDoWhile	typeref:typename:auto	access:public	signature:()
AstDoWhile::statement	specific_ast_node_classes.hpp	/^	inline auto statement() { return at(0); }$/;"	kind:f	struct:AstDoWhile	typeref:typename:auto	access:public	signature:()
AstDoWhile::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstDoWhile	typeref:typename:std::string	access:public	signature:() const
AstIdent	specific_ast_node_classes.hpp	/^struct AstIdent : public AstNode$/;"	kind:s	inherits:AstNode
AstIdent::accept	specific_ast_node_classes.cpp	/^void AstIdent::accept(Visitor* v)$/;"	kind:f	class:AstIdent	typeref:typename:void	signature:(Visitor * v)
AstIdent::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIdent	typeref:typename:void	access:public	signature:(Visitor * v)
AstIdent::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIdent	typeref:typename:std::string	access:public	signature:() const
AstIf	specific_ast_node_classes.hpp	/^struct AstIf : public AstNode$/;"	kind:s	inherits:AstNode
AstIf::accept	specific_ast_node_classes.cpp	/^void AstIf::accept(Visitor* v)$/;"	kind:f	class:AstIf	typeref:typename:void	signature:(Visitor * v)
AstIf::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIf	typeref:typename:void	access:public	signature:(Visitor * v)
AstIf::expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(0); }$/;"	kind:f	struct:AstIf	typeref:typename:auto	access:public	signature:()
AstIf::statement	specific_ast_node_classes.hpp	/^	inline auto statement() { return at(1); }$/;"	kind:f	struct:AstIf	typeref:typename:auto	access:public	signature:()
AstIf::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIf	typeref:typename:std::string	access:public	signature:() const
AstIfChain	specific_ast_node_classes.hpp	/^struct AstIfChain : public AstNode$/;"	kind:s	inherits:AstNode
AstIfChain::accept	specific_ast_node_classes.cpp	/^void AstIfChain::accept(Visitor* v)$/;"	kind:f	class:AstIfChain	typeref:typename:void	signature:(Visitor * v)
AstIfChain::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIfChain	typeref:typename:void	access:public	signature:(Visitor * v)
AstIfChain::expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(0); }$/;"	kind:f	struct:AstIfChain	typeref:typename:auto	access:public	signature:()
AstIfChain::statement_else	specific_ast_node_classes.hpp	/^	inline auto statement_else() { return at(2); }$/;"	kind:f	struct:AstIfChain	typeref:typename:auto	access:public	signature:()
AstIfChain::statement_if	specific_ast_node_classes.hpp	/^	inline auto statement_if() { return at(1); }$/;"	kind:f	struct:AstIfChain	typeref:typename:auto	access:public	signature:()
AstIfChain::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIfChain	typeref:typename:std::string	access:public	signature:() const
AstIndexedAssign	specific_ast_node_classes.hpp	/^struct AstIndexedAssign : public AstNode$/;"	kind:s	inherits:AstNode
AstIndexedAssign::accept	specific_ast_node_classes.cpp	/^void AstIndexedAssign::accept(Visitor* v)$/;"	kind:f	class:AstIndexedAssign	typeref:typename:void	signature:(Visitor * v)
AstIndexedAssign::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIndexedAssign	typeref:typename:void	access:public	signature:(Visitor * v)
AstIndexedAssign::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:auto	access:public	signature:()
AstIndexedAssign::index_node	specific_ast_node_classes.hpp	/^	inline auto index_node() { return at(1); }$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:auto	access:public	signature:()
AstIndexedAssign::rhs_node	specific_ast_node_classes.hpp	/^	inline auto rhs_node() { return at(2); }$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:auto	access:public	signature:()
AstIndexedAssign::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:std::string	access:public	signature:() const
AstIndexedLoad	specific_ast_node_classes.hpp	/^struct AstIndexedLoad : public AstNode$/;"	kind:s	inherits:AstNode
AstIndexedLoad::accept	specific_ast_node_classes.cpp	/^void AstIndexedLoad::accept(Visitor* v)$/;"	kind:f	class:AstIndexedLoad	typeref:typename:void	signature:(Visitor * v)
AstIndexedLoad::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIndexedLoad	typeref:typename:void	access:public	signature:(Visitor * v)
AstIndexedLoad::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstIndexedLoad	typeref:typename:auto	access:public	signature:()
AstIndexedLoad::index_node	specific_ast_node_classes.hpp	/^	inline auto index_node() { return at(1); }$/;"	kind:f	struct:AstIndexedLoad	typeref:typename:auto	access:public	signature:()
AstIndexedLoad::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIndexedLoad	typeref:typename:std::string	access:public	signature:() const
AstListIdent	specific_ast_node_classes.hpp	/^struct AstListIdent : public AstNode$/;"	kind:s	inherits:AstNode
AstListIdent::accept	specific_ast_node_classes.cpp	/^void AstListIdent::accept(Visitor* v)$/;"	kind:f	class:AstListIdent	typeref:typename:void	signature:(Visitor * v)
AstListIdent::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstListIdent	typeref:typename:void	access:public	signature:(Visitor * v)
AstListIdent::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstListIdent	typeref:typename:std::string	access:public	signature:() const
AstListStatement	specific_ast_node_classes.hpp	/^struct AstListStatement : public AstNode$/;"	kind:s	inherits:AstNode
AstListStatement::accept	specific_ast_node_classes.cpp	/^void AstListStatement::accept(Visitor* v)$/;"	kind:f	class:AstListStatement	typeref:typename:void	signature:(Visitor * v)
AstListStatement::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstListStatement	typeref:typename:void	access:public	signature:(Visitor * v)
AstListStatement::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstListStatement	typeref:typename:std::string	access:public	signature:() const
AstLoad	specific_ast_node_classes.hpp	/^struct AstLoad : public AstNode$/;"	kind:s	inherits:AstNode
AstLoad::accept	specific_ast_node_classes.cpp	/^void AstLoad::accept(Visitor* v)$/;"	kind:f	class:AstLoad	typeref:typename:void	signature:(Visitor * v)
AstLoad::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstLoad	typeref:typename:void	access:public	signature:(Visitor * v)
AstLoad::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstLoad	typeref:typename:auto	access:public	signature:()
AstLoad::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstLoad	typeref:typename:std::string	access:public	signature:() const
AstMkScope	specific_ast_node_classes.hpp	/^struct AstMkScope : public AstNode$/;"	kind:s	inherits:AstNode
AstMkScope::accept	specific_ast_node_classes.cpp	/^void AstMkScope::accept(Visitor* v)$/;"	kind:f	class:AstMkScope	typeref:typename:void	signature:(Visitor * v)
AstMkScope::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstMkScope	typeref:typename:void	access:public	signature:(Visitor * v)
AstMkScope::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstMkScope	typeref:typename:std::string	access:public	signature:() const
AstMultiVarDecl	specific_ast_node_classes.hpp	/^struct AstMultiVarDecl : public AstNode$/;"	kind:s	inherits:AstNode
AstMultiVarDecl::accept	specific_ast_node_classes.cpp	/^void AstMultiVarDecl::accept(Visitor* v)$/;"	kind:f	class:AstMultiVarDecl	typeref:typename:void	signature:(Visitor * v)
AstMultiVarDecl::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstMultiVarDecl	typeref:typename:void	access:public	signature:(Visitor * v)
AstMultiVarDecl::builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstMultiVarDecl	typeref:typename:auto	access:public	signature:()
AstMultiVarDecl::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstMultiVarDecl	typeref:typename:std::string	access:public	signature:() const
AstNode	ast_node_classes.cpp	/^AstNode::AstNode()$/;"	kind:f	class:AstNode	signature:()
AstNode	ast_node_classes.hpp	/^	AstNode();$/;"	kind:p	class:AstNode	access:public	signature:()
AstNode	ast_node_classes.hpp	/^	AstNode(AstNode&& to_move) = default;$/;"	kind:p	class:AstNode	access:public	signature:(AstNode && to_move)
AstNode	ast_node_classes.hpp	/^	AstNode(const AstNode& to_copy) = default;$/;"	kind:p	class:AstNode	access:public	signature:(const AstNode & to_copy)
AstNode	ast_node_classes.hpp	/^class AstNode$/;"	kind:c
AstNode::AstNode	ast_node_classes.cpp	/^AstNode::AstNode()$/;"	kind:f	class:AstNode	signature:()
AstNode::AstNode	ast_node_classes.hpp	/^	AstNode();$/;"	kind:p	class:AstNode	access:public	signature:()
AstNode::AstNode	ast_node_classes.hpp	/^	AstNode(AstNode&& to_move) = default;$/;"	kind:p	class:AstNode	access:public	signature:(AstNode && to_move)
AstNode::AstNode	ast_node_classes.hpp	/^	AstNode(const AstNode& to_copy) = default;$/;"	kind:p	class:AstNode	access:public	signature:(const AstNode & to_copy)
AstNode::__anon929f3355010a	ast_node_classes.hpp	/^	{$/;"	kind:u	class:AstNode	access:public
AstNode::__anon929f3355010a::binop	ast_node_classes.hpp	/^		AstNodeBinop binop;$/;"	kind:m	union:AstNode::__anon929f3355010a	typeref:typename:AstNodeBinop	access:public
AstNode::__anon929f3355010a::builtin_typename	ast_node_classes.hpp	/^		BuiltinTypename builtin_typename;$/;"	kind:m	union:AstNode::__anon929f3355010a	typeref:typename:BuiltinTypename	access:public
AstNode::accept	ast_node_classes.cpp	/^void AstNode::accept(Visitor* v)$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(Visitor * v)
AstNode::accept	ast_node_classes.hpp	/^	virtual void accept(Visitor* v);$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(Visitor * v)
AstNode::append_child	ast_node_classes.cpp	/^void AstNode::append_child(AstNode* some_child)$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(AstNode * some_child)
AstNode::append_child	ast_node_classes.hpp	/^	void append_child(AstNode* some_child);$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(AstNode * some_child)
AstNode::append_to_list	ast_node_classes.cpp	/^void AstNode::append_to_list(AstNode* to_append)$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(AstNode * to_append)
AstNode::append_to_list	ast_node_classes.hpp	/^	void append_to_list(AstNode* to_append);$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(AstNode * to_append)
AstNode::at	ast_node_classes.hpp	/^	inline AstNode* at(size_t index)$/;"	kind:f	class:AstNode	typeref:typename:AstNode *	access:protected	signature:(size_t index)
AstNode::children	ast_node_classes.hpp	/^	std::vector<AstNode*> children;$/;"	kind:m	class:AstNode	typeref:typename:std::vector<AstNode * >	access:public
AstNode::list	ast_node_classes.hpp	/^	std::vector<AstNode*>& list = children;$/;"	kind:m	class:AstNode	typeref:typename:std::vector<AstNode * > &	access:public
AstNode::num	ast_node_classes.hpp	/^	int num;$/;"	kind:m	class:AstNode	typeref:typename:int	access:public
AstNode::operator =	ast_node_classes.hpp	/^	AstNode& operator = (AstNode&& to_move) = default;$/;"	kind:p	class:AstNode	typeref:typename:AstNode &	access:public	signature:(AstNode && to_move)
AstNode::operator =	ast_node_classes.hpp	/^	AstNode& operator = (const AstNode& to_copy) = default;$/;"	kind:p	class:AstNode	typeref:typename:AstNode &	access:public	signature:(const AstNode & to_copy)
AstNode::osprint	ast_node_classes.hpp	/^	inline std::ostream& osprint(std::ostream& os) const$/;"	kind:f	class:AstNode	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
AstNode::output_to_json	ast_node_classes.cpp	/^void AstNode::output_to_json(Json::Value& json_node) const$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(Json::Value & json_node) const
AstNode::output_to_json	ast_node_classes.hpp	/^	void output_to_json(Json::Value& json_node) const;$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(Json::Value & json_node) const
AstNode::text	ast_node_classes.hpp	/^	std::vector<std::string> text;$/;"	kind:m	class:AstNode	typeref:typename:std::vector<std::string>	access:public
AstNode::to_string	ast_node_classes.hpp	/^	virtual std::string to_string() const$/;"	kind:f	class:AstNode	typeref:typename:std::string	access:public	signature:() const
AstNode::~AstNode	ast_node_classes.cpp	/^AstNode::~AstNode()$/;"	kind:f	class:AstNode	signature:()
AstNode::~AstNode	ast_node_classes.hpp	/^	virtual ~AstNode();$/;"	kind:p	class:AstNode	access:public	signature:()
AstNodeBinop	ast_node_classes.hpp	/^enum class AstNodeBinop : int$/;"	kind:g	typeref:typename:int
AstProgram	specific_ast_node_classes.hpp	/^struct AstProgram : public AstNode$/;"	kind:s	inherits:AstNode
AstProgram::accept	specific_ast_node_classes.cpp	/^void AstProgram::accept(Visitor* v)$/;"	kind:f	class:AstProgram	typeref:typename:void	signature:(Visitor * v)
AstProgram::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstProgram	typeref:typename:void	access:public	signature:(Visitor * v)
AstProgram::statements	specific_ast_node_classes.hpp	/^	inline auto statements() { return at(0); }$/;"	kind:f	struct:AstProgram	typeref:typename:auto	access:public	signature:()
AstProgram::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstProgram	typeref:typename:std::string	access:public	signature:() const
AstRmScope	specific_ast_node_classes.hpp	/^struct AstRmScope : public AstNode$/;"	kind:s	inherits:AstNode
AstRmScope::accept	specific_ast_node_classes.cpp	/^void AstRmScope::accept(Visitor* v)$/;"	kind:f	class:AstRmScope	typeref:typename:void	signature:(Visitor * v)
AstRmScope::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstRmScope	typeref:typename:void	access:public	signature:(Visitor * v)
AstRmScope::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstRmScope	typeref:typename:std::string	access:public	signature:() const
AstStatements	specific_ast_node_classes.hpp	/^struct AstStatements : public AstNode$/;"	kind:s	inherits:AstNode
AstStatements::accept	specific_ast_node_classes.cpp	/^void AstStatements::accept(Visitor* v)$/;"	kind:f	class:AstStatements	typeref:typename:void	signature:(Visitor * v)
AstStatements::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstStatements	typeref:typename:void	access:public	signature:(Visitor * v)
AstStatements::list_statement	specific_ast_node_classes.hpp	/^	inline auto list_statement() { return at(1); }$/;"	kind:f	struct:AstStatements	typeref:typename:auto	access:public	signature:()
AstStatements::mkscope	specific_ast_node_classes.hpp	/^	inline auto mkscope() { return at(0); }$/;"	kind:f	struct:AstStatements	typeref:typename:auto	access:public	signature:()
AstStatements::rmscope	specific_ast_node_classes.hpp	/^	inline auto rmscope() { return at(2); }$/;"	kind:f	struct:AstStatements	typeref:typename:auto	access:public	signature:()
AstStatements::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstStatements	typeref:typename:std::string	access:public	signature:() const
AstVarDeclArray	specific_ast_node_classes.hpp	/^struct AstVarDeclArray : public AstNode$/;"	kind:s	inherits:AstNode
AstVarDeclArray::accept	specific_ast_node_classes.cpp	/^void AstVarDeclArray::accept(Visitor* v)$/;"	kind:f	class:AstVarDeclArray	typeref:typename:void	signature:(Visitor * v)
AstVarDeclArray::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstVarDeclArray	typeref:typename:void	access:public	signature:(Visitor * v)
AstVarDeclArray::builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:auto	access:public	signature:()
AstVarDeclArray::dim_node	specific_ast_node_classes.hpp	/^	inline auto dim_node() { return at(2); }$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:auto	access:public	signature:()
AstVarDeclArray::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(1); }$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:auto	access:public	signature:()
AstVarDeclArray::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:std::string	access:public	signature:() const
AstVarDeclSimple	specific_ast_node_classes.hpp	/^struct AstVarDeclSimple : public AstNode$/;"	kind:s	inherits:AstNode
AstVarDeclSimple::accept	specific_ast_node_classes.cpp	/^void AstVarDeclSimple::accept(Visitor* v)$/;"	kind:f	class:AstVarDeclSimple	typeref:typename:void	signature:(Visitor * v)
AstVarDeclSimple::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstVarDeclSimple	typeref:typename:void	access:public	signature:(Visitor * v)
AstVarDeclSimple::builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstVarDeclSimple	typeref:typename:auto	access:public	signature:()
AstVarDeclSimple::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(1); }$/;"	kind:f	struct:AstVarDeclSimple	typeref:typename:auto	access:public	signature:()
AstVarDeclSimple::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstVarDeclSimple	typeref:typename:std::string	access:public	signature:() const
AstVarDeclWithInit	specific_ast_node_classes.hpp	/^struct AstVarDeclWithInit : public AstNode$/;"	kind:s	inherits:AstNode
AstVarDeclWithInit::accept	specific_ast_node_classes.cpp	/^void AstVarDeclWithInit::accept(Visitor* v)$/;"	kind:f	class:AstVarDeclWithInit	typeref:typename:void	signature:(Visitor * v)
AstVarDeclWithInit::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstVarDeclWithInit	typeref:typename:void	access:public	signature:(Visitor * v)
AstVarDeclWithInit::builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:auto	access:public	signature:()
AstVarDeclWithInit::expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(2); }$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:auto	access:public	signature:()
AstVarDeclWithInit::ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(1); }$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:auto	access:public	signature:()
AstVarDeclWithInit::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:std::string	access:public	signature:() const
AstWhile	specific_ast_node_classes.hpp	/^struct AstWhile : public AstNode$/;"	kind:s	inherits:AstNode
AstWhile::accept	specific_ast_node_classes.cpp	/^void AstWhile::accept(Visitor* v)$/;"	kind:f	class:AstWhile	typeref:typename:void	signature:(Visitor * v)
AstWhile::accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstWhile	typeref:typename:void	access:public	signature:(Visitor * v)
AstWhile::expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(0); }$/;"	kind:f	struct:AstWhile	typeref:typename:auto	access:public	signature:()
AstWhile::statement	specific_ast_node_classes.hpp	/^	inline auto statement() { return at(1); }$/;"	kind:f	struct:AstWhile	typeref:typename:auto	access:public	signature:()
AstWhile::to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstWhile	typeref:typename:std::string	access:public	signature:() const
Base	liborangepower_src/str_split_helper_classes.hpp	/^	typedef StrSplitHelperBase<StrType> Base;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:StrSplitHelperBase<StrType>	access:public
Base	liborangepower_src/str_split_helper_classes.hpp	/^	typedef StrSplitHelperBase<StrType> Base;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:StrSplitHelperBase<StrType>	access:public
BitAnd	ast_node_classes.hpp	/^	BitAnd,$/;"	kind:e	enum:AstNodeBinop	access:public
BitAsr	ast_node_classes.hpp	/^	BitAsr,$/;"	kind:e	enum:AstNodeBinop	access:public
BitLsl	ast_node_classes.hpp	/^	BitLsl,$/;"	kind:e	enum:AstNodeBinop	access:public
BitLsr	ast_node_classes.hpp	/^	BitLsr,$/;"	kind:e	enum:AstNodeBinop	access:public
BitOr	ast_node_classes.hpp	/^	BitOr,$/;"	kind:e	enum:AstNodeBinop	access:public
BitXor	ast_node_classes.hpp	/^	BitXor,$/;"	kind:e	enum:AstNodeBinop	access:public
Blank	symbol_table_class.hpp	/^	Blank,$/;"	kind:e	enum:BuiltinTypename	access:public
BuiltinTypename	symbol_table_class.hpp	/^enum class BuiltinTypename : int$/;"	kind:g	typeref:typename:int
CmpEq	ast_node_classes.hpp	/^	CmpEq,$/;"	kind:e	enum:AstNodeBinop	access:public
CmpGe	ast_node_classes.hpp	/^	CmpGe,$/;"	kind:e	enum:AstNodeBinop	access:public
CmpGt	ast_node_classes.hpp	/^	CmpGt,$/;"	kind:e	enum:AstNodeBinop	access:public
CmpLe	ast_node_classes.hpp	/^	CmpLe,$/;"	kind:e	enum:AstNodeBinop	access:public
CmpLt	ast_node_classes.hpp	/^	CmpLt,$/;"	kind:e	enum:AstNodeBinop	access:public
CmpNe	ast_node_classes.hpp	/^	CmpNe,$/;"	kind:e	enum:AstNodeBinop	access:public
Divides	ast_node_classes.hpp	/^	Divides,$/;"	kind:e	enum:AstNodeBinop	access:public
IdentTable	ident_table_class.hpp	/^	inline IdentTable()$/;"	kind:f	class:IdentTable	access:public	signature:()
IdentTable	ident_table_class.hpp	/^class IdentTable$/;"	kind:c
IdentTable::IdentTable	ident_table_class.hpp	/^	inline IdentTable()$/;"	kind:f	class:IdentTable	access:public	signature:()
IdentTable::__table	ident_table_class.hpp	/^	std::map<std::string, Type> __table;$/;"	kind:m	class:IdentTable	typeref:typename:std::map<std::string,Type>	access:private
IdentTable::at	ident_table_class.hpp	/^	inline Type& at(const std::string& some_name)$/;"	kind:f	class:IdentTable	typeref:typename:Type &	access:public	signature:(const std::string & some_name)
IdentTable::at	ident_table_class.hpp	/^	inline const Type& at(const std::string& some_name) const$/;"	kind:f	class:IdentTable	typeref:typename:const Type &	access:public	signature:(const std::string & some_name) const
IdentTable::contains	ident_table_class.hpp	/^	inline bool contains(const std::string& some_name) const$/;"	kind:f	class:IdentTable	typeref:typename:bool	access:public	signature:(const std::string & some_name) const
IdentTable::gen_getter_by_con_ref	ident_table_class.hpp	/^	gen_getter_by_con_ref(table);$/;"	kind:p	class:IdentTable	access:public	signature:(table)
IdentTable::insert_or_assign	ident_table_class.hpp	/^	inline void insert_or_assign(Type&& to_insert_or_assign)$/;"	kind:f	class:IdentTable	typeref:typename:void	access:public	signature:(Type && to_insert_or_assign)
IdentTable::insert_or_assign	ident_table_class.hpp	/^	inline void insert_or_assign(const Type& to_insert_or_assign)$/;"	kind:f	class:IdentTable	typeref:typename:void	access:public	signature:(const Type & to_insert_or_assign)
InstanceType	liborangepower_src/time_stuff.hpp	/^	typedef std::mt19937_64 InstanceType;$/;"	kind:t	class:liborangepower::time::Prng	typeref:typename:std::mt19937_64	access:public
Int	symbol_table_class.hpp	/^	Int,$/;"	kind:e	enum:BuiltinTypename	access:public
Interpreter	interpreter_class.hpp	/^class Interpreter : public Visitor$/;"	kind:c	inherits:Visitor
Interpreter::__num_vec	interpreter_class.hpp	/^	std::vector<int> __num_vec;$/;"	kind:m	class:Interpreter	typeref:typename:std::vector<int>	access:protected
Interpreter::__str_vec	interpreter_class.hpp	/^	std::vector<std::string*> __str_vec;$/;"	kind:m	class:Interpreter	typeref:typename:std::vector<std::string * >	access:protected
Interpreter::interpret	interpreter_class.cpp	/^void Interpreter::interpret()$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:()
Interpreter::interpret	interpreter_class.hpp	/^	void interpret();$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:()
Interpreter::pop_num	interpreter_class.hpp	/^	inline auto pop_num()$/;"	kind:f	class:Interpreter	typeref:typename:auto	access:protected	signature:()
Interpreter::pop_str	interpreter_class.hpp	/^	inline auto pop_str()$/;"	kind:f	class:Interpreter	typeref:typename:auto	access:protected	signature:()
Interpreter::push_num	interpreter_class.hpp	/^	inline void push_num(int to_push)$/;"	kind:f	class:Interpreter	typeref:typename:void	access:protected	signature:(int to_push)
Interpreter::push_str	interpreter_class.hpp	/^	inline void push_str(std::string* to_push)$/;"	kind:f	class:Interpreter	typeref:typename:void	access:protected	signature:(std::string * to_push)
Interpreter::visit_assign	interpreter_class.cpp	/^void Interpreter::visit_assign(AstAssign* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstAssign * p)
Interpreter::visit_assign	interpreter_class.hpp	/^	void visit_assign(AstAssign* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstAssign * p)
Interpreter::visit_binop	interpreter_class.cpp	/^void Interpreter::visit_binop(AstBinop* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstBinop * p)
Interpreter::visit_binop	interpreter_class.hpp	/^	void visit_binop(AstBinop* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstBinop * p)
Interpreter::visit_builtin_typename	interpreter_class.cpp	/^void Interpreter::visit_builtin_typename(AstBuiltinTypename* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstBuiltinTypename * p)
Interpreter::visit_builtin_typename	interpreter_class.hpp	/^	void visit_builtin_typename(AstBuiltinTypename* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstBuiltinTypename * p)
Interpreter::visit_constant	interpreter_class.cpp	/^void Interpreter::visit_constant(AstConstant* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstConstant * p)
Interpreter::visit_constant	interpreter_class.hpp	/^	void visit_constant(AstConstant* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstConstant * p)
Interpreter::visit_do_while	interpreter_class.cpp	/^void Interpreter::visit_do_while(AstDoWhile* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstDoWhile * p)
Interpreter::visit_do_while	interpreter_class.hpp	/^	void visit_do_while(AstDoWhile* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstDoWhile * p)
Interpreter::visit_ident	interpreter_class.cpp	/^void Interpreter::visit_ident(AstIdent* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIdent * p)
Interpreter::visit_ident	interpreter_class.hpp	/^	void visit_ident(AstIdent* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIdent * p)
Interpreter::visit_if	interpreter_class.cpp	/^void Interpreter::visit_if(AstIf* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIf * p)
Interpreter::visit_if	interpreter_class.hpp	/^	void visit_if(AstIf* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIf * p)
Interpreter::visit_if_chain	interpreter_class.cpp	/^void Interpreter::visit_if_chain(AstIfChain* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIfChain * p)
Interpreter::visit_if_chain	interpreter_class.hpp	/^	void visit_if_chain(AstIfChain* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIfChain * p)
Interpreter::visit_index	interpreter_class.hpp	/^	void visit_index(AstIndex* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIndex * p)
Interpreter::visit_indexed_assign	interpreter_class.cpp	/^void Interpreter::visit_indexed_assign(AstIndexedAssign* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIndexedAssign * p)
Interpreter::visit_indexed_assign	interpreter_class.hpp	/^	void visit_indexed_assign(AstIndexedAssign* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIndexedAssign * p)
Interpreter::visit_indexed_load	interpreter_class.cpp	/^void Interpreter::visit_indexed_load(AstIndexedLoad* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIndexedLoad * p)
Interpreter::visit_indexed_load	interpreter_class.hpp	/^	void visit_indexed_load(AstIndexedLoad* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIndexedLoad * p)
Interpreter::visit_list_ident	interpreter_class.cpp	/^void Interpreter::visit_list_ident(AstListIdent* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstListIdent * p)
Interpreter::visit_list_ident	interpreter_class.hpp	/^	void visit_list_ident(AstListIdent* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstListIdent * p)
Interpreter::visit_list_statement	interpreter_class.cpp	/^void Interpreter::visit_list_statement(AstListStatement* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstListStatement * p)
Interpreter::visit_list_statement	interpreter_class.hpp	/^	void visit_list_statement(AstListStatement* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstListStatement * p)
Interpreter::visit_load	interpreter_class.cpp	/^void Interpreter::visit_load(AstLoad* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstLoad * p)
Interpreter::visit_load	interpreter_class.hpp	/^	void visit_load(AstLoad* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstLoad * p)
Interpreter::visit_mk_scope	interpreter_class.cpp	/^void Interpreter::visit_mk_scope(AstMkScope* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstMkScope * p)
Interpreter::visit_mk_scope	interpreter_class.hpp	/^	void visit_mk_scope(AstMkScope* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstMkScope * p)
Interpreter::visit_multi_var_decl	interpreter_class.cpp	/^void Interpreter::visit_multi_var_decl(AstMultiVarDecl* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstMultiVarDecl * p)
Interpreter::visit_multi_var_decl	interpreter_class.hpp	/^	void visit_multi_var_decl(AstMultiVarDecl* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstMultiVarDecl * p)
Interpreter::visit_program	interpreter_class.cpp	/^void Interpreter::visit_program(AstProgram* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstProgram * p)
Interpreter::visit_program	interpreter_class.hpp	/^	void visit_program(AstProgram* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstProgram * p)
Interpreter::visit_rm_scope	interpreter_class.cpp	/^void Interpreter::visit_rm_scope(AstRmScope* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstRmScope * p)
Interpreter::visit_rm_scope	interpreter_class.hpp	/^	void visit_rm_scope(AstRmScope* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstRmScope * p)
Interpreter::visit_statements	interpreter_class.cpp	/^void Interpreter::visit_statements(AstStatements* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstStatements * p)
Interpreter::visit_statements	interpreter_class.hpp	/^	void visit_statements(AstStatements* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstStatements * p)
Interpreter::visit_var_decl_array	interpreter_class.cpp	/^void Interpreter::visit_var_decl_array(AstVarDeclArray* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstVarDeclArray * p)
Interpreter::visit_var_decl_array	interpreter_class.hpp	/^	void visit_var_decl_array(AstVarDeclArray* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstVarDeclArray * p)
Interpreter::visit_var_decl_simple	interpreter_class.cpp	/^void Interpreter::visit_var_decl_simple(AstVarDeclSimple* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstVarDeclSimple * p)
Interpreter::visit_var_decl_simple	interpreter_class.hpp	/^	void visit_var_decl_simple(AstVarDeclSimple* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstVarDeclSimple * p)
Interpreter::visit_var_decl_with_init	interpreter_class.cpp	/^void Interpreter::visit_var_decl_with_init(AstVarDeclWithInit* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstVarDeclWithInit * p)
Interpreter::visit_var_decl_with_init	interpreter_class.hpp	/^	void visit_var_decl_with_init(AstVarDeclWithInit* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstVarDeclWithInit * p)
Interpreter::visit_while	interpreter_class.cpp	/^void Interpreter::visit_while(AstWhile* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstWhile * p)
Interpreter::visit_while	interpreter_class.hpp	/^	void visit_while(AstWhile* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstWhile * p)
LogicAnd	ast_node_classes.hpp	/^	LogicAnd,$/;"	kind:e	enum:AstNodeBinop	access:public
LogicOr	ast_node_classes.hpp	/^	LogicOr,$/;"	kind:e	enum:AstNodeBinop	access:public
Minus	ast_node_classes.hpp	/^	Minus,$/;"	kind:e	enum:AstNodeBinop	access:public
Modulo	ast_node_classes.hpp	/^	Modulo,$/;"	kind:e	enum:AstNodeBinop	access:public
Multiplies	ast_node_classes.hpp	/^	Multiplies,$/;"	kind:e	enum:AstNodeBinop	access:public
OneLevelTable	scoped_ident_table_class.hpp	/^	typedef IdentTable<Type> OneLevelTable;$/;"	kind:t	class:ScopedIdentTable	typeref:typename:IdentTable<Type>	access:public
Plus	ast_node_classes.hpp	/^	Plus,$/;"	kind:e	enum:AstNodeBinop	access:public
PrevCurrPair	liborangepower_src/prev_curr_pair_class.hpp	/^class PrevCurrPair$/;"	kind:c	namespace:liborangepower::containers
Prng	liborangepower_src/time_stuff.hpp	/^	inline Prng(int s_param_0=0, int s_param_1=0) $/;"	kind:f	class:liborangepower::time::Prng	access:public	signature:(int s_param_0=0,int s_param_1=0)
Prng	liborangepower_src/time_stuff.hpp	/^class Prng$/;"	kind:c	namespace:liborangepower::time
Profiler	liborangepower_src/time_stuff.hpp	/^class Profiler$/;"	kind:c	namespace:liborangepower::time
ScopedIdentTable	scoped_ident_table_class.hpp	/^	inline ScopedIdentTable()$/;"	kind:f	class:ScopedIdentTable	access:public	signature:()
ScopedIdentTable	scoped_ident_table_class.hpp	/^class ScopedIdentTable$/;"	kind:c
ScopedIdentTable::OneLevelTable	scoped_ident_table_class.hpp	/^	typedef IdentTable<Type> OneLevelTable;$/;"	kind:t	class:ScopedIdentTable	typeref:typename:IdentTable<Type>	access:public
ScopedIdentTable::ScopedIdentTable	scoped_ident_table_class.hpp	/^	inline ScopedIdentTable()$/;"	kind:f	class:ScopedIdentTable	access:public	signature:()
ScopedIdentTable::__scope_num	scoped_ident_table_class.hpp	/^	s64 __scope_num = -1;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:s64	access:protected
ScopedIdentTable::__table	scoped_ident_table_class.hpp	/^	std::vector<OneLevelTable> __table;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:std::vector<OneLevelTable>	access:protected
ScopedIdentTable::at	scoped_ident_table_class.hpp	/^	inline auto& at(size_t table_index)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:auto &	access:public	signature:(size_t table_index)
ScopedIdentTable::at	scoped_ident_table_class.hpp	/^	inline const auto& at(size_t table_index) const$/;"	kind:f	class:ScopedIdentTable	typeref:typename:const auto &	access:public	signature:(size_t table_index) const
ScopedIdentTable::builtin_scope_level	scoped_ident_table_class.hpp	/^	static constexpr s64 builtin_scope_level = 0;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:s64	access:public
ScopedIdentTable::find	scoped_ident_table_class.hpp	/^	Type* find(const std::string& some_name) __attribute__((noinline))$/;"	kind:f	class:ScopedIdentTable	typeref:typename:Type *	access:public	signature:(const std::string & some_name)
ScopedIdentTable::find_in_this_level	scoped_ident_table_class.hpp	/^	inline Type* find_in_this_level(const std::string& some_name)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:Type *	access:public	signature:(const std::string & some_name)
ScopedIdentTable::gen_getter_by_con_ref	scoped_ident_table_class.hpp	/^	gen_getter_by_con_ref(table);$/;"	kind:p	class:ScopedIdentTable	access:public	signature:(table)
ScopedIdentTable::gen_getter_by_ref	scoped_ident_table_class.hpp	/^	gen_getter_by_ref(table);$/;"	kind:p	class:ScopedIdentTable	access:public	signature:(table)
ScopedIdentTable::gen_getter_by_val	scoped_ident_table_class.hpp	/^	gen_getter_by_val(scope_num);$/;"	kind:p	class:ScopedIdentTable	access:public	signature:(scope_num)
ScopedIdentTable::insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(Type&& to_insert_or_assign)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(Type && to_insert_or_assign)
ScopedIdentTable::insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(const Type& to_insert_or_assign)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(const Type & to_insert_or_assign)
ScopedIdentTable::insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(size_t level, $/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(size_t level,const Type & to_insert_or_assign)
ScopedIdentTable::insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(size_t level, Type&& to_insert_or_assign)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(size_t level,Type && to_insert_or_assign)
ScopedIdentTable::mkscope	scoped_ident_table_class.hpp	/^	void mkscope() __attribute__((noinline))$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:()
ScopedIdentTable::name_is_builtin	scoped_ident_table_class.hpp	/^	bool name_is_builtin(const std::string& some_name) const$/;"	kind:f	class:ScopedIdentTable	typeref:typename:bool	access:public	signature:(const std::string & some_name) const
ScopedIdentTable::not_found_level	scoped_ident_table_class.hpp	/^	static constexpr s64 not_found_level = builtin_scope_level - 1;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:s64	access:public
ScopedIdentTable::rmscope	scoped_ident_table_class.hpp	/^	void rmscope() __attribute__((noinline))$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:()
ScopedIdentTable::scope_lev	scoped_ident_table_class.hpp	/^	inline s64 scope_lev() const$/;"	kind:f	class:ScopedIdentTable	typeref:typename:s64	access:public	signature:() const
ScopedIdentTable::~ScopedIdentTable	scoped_ident_table_class.hpp	/^	virtual ~ScopedIdentTable()$/;"	kind:f	class:ScopedIdentTable	access:public	signature:()
SeedType	liborangepower_src/time_stuff.hpp	/^		.time_since_epoch().count()) SeedType;$/;"	kind:t	class:liborangepower::time::Prng	access:public
SizeT2d	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<size_t> SizeT2d;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<size_t>
StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(StrSplitHelperBase && to_move)
StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(const StrSplitHelperBase & to_copy)
StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase()$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:()
StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase(StrType&& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(StrType && s_to_split)
StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase(const StrType& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(const StrType & s_to_split)
StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^class StrSplitHelperBase$/;"	kind:c	namespace:liborangepower::strings
StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(StrSplitHelperNoEscapes && to_move)
StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(const StrSplitHelperNoEscapes & to_copy)
StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes()$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:()
StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes(StrType&& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(StrType && s_to_split)
StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes(const StrType& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(const StrType & s_to_split)
StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^class StrSplitHelperNoEscapes : public StrSplitHelperBase<StrType>$/;"	kind:c	namespace:liborangepower::strings	inherits:StrSplitHelperBase<StrType>
StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(StrSplitHelperWithEscapes && to_move)
StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(const StrSplitHelperWithEscapes & to_copy)
StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes()$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:()
StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes(StrType&& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(StrType && s_to_split)
StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes(const StrType& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(const StrType & s_to_split)
StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^class StrSplitHelperWithEscapes : public StrSplitHelperBase<StrType>$/;"	kind:c	namespace:liborangepower::strings	inherits:StrSplitHelperBase<StrType>
StrType	liborangepower_src/str_split_helper_classes.hpp	/^	typedef SomeStrType StrType;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:SomeStrType	access:public
SymType	symbol_table_class.hpp	/^enum class SymType : int$/;"	kind:g	typeref:typename:int
Symbol	symbol_table_class.hpp	/^	inline Symbol()$/;"	kind:f	class:Symbol	access:public	signature:()
Symbol	symbol_table_class.hpp	/^	inline Symbol(Symbol&& to_move) = default;$/;"	kind:p	class:Symbol	access:public	signature:(Symbol && to_move)
Symbol	symbol_table_class.hpp	/^	inline Symbol(const Symbol& to_copy) = default;$/;"	kind:p	class:Symbol	access:public	signature:(const Symbol & to_copy)
Symbol	symbol_table_class.hpp	/^	inline Symbol(const std::string& s_name, SymType s_type)$/;"	kind:f	class:Symbol	access:public	signature:(const std::string & s_name,SymType s_type)
Symbol	symbol_table_class.hpp	/^class Symbol$/;"	kind:c
Symbol::Symbol	symbol_table_class.hpp	/^	inline Symbol()$/;"	kind:f	class:Symbol	access:public	signature:()
Symbol::Symbol	symbol_table_class.hpp	/^	inline Symbol(Symbol&& to_move) = default;$/;"	kind:p	class:Symbol	access:public	signature:(Symbol && to_move)
Symbol::Symbol	symbol_table_class.hpp	/^	inline Symbol(const Symbol& to_copy) = default;$/;"	kind:p	class:Symbol	access:public	signature:(const Symbol & to_copy)
Symbol::Symbol	symbol_table_class.hpp	/^	inline Symbol(const std::string& s_name, SymType s_type)$/;"	kind:f	class:Symbol	access:public	signature:(const std::string & s_name,SymType s_type)
Symbol::__data	symbol_table_class.hpp	/^	std::vector<int> __data;$/;"	kind:m	class:Symbol	typeref:typename:std::vector<int>	access:private
Symbol::__name	symbol_table_class.hpp	/^	std::string __name;$/;"	kind:m	class:Symbol	typeref:typename:std::string	access:private
Symbol::__type	symbol_table_class.hpp	/^	SymType __type;$/;"	kind:m	class:Symbol	typeref:typename:SymType	access:private
Symbol::__var_type	symbol_table_class.hpp	/^	BuiltinTypename __var_type;$/;"	kind:m	class:Symbol	typeref:typename:BuiltinTypename	access:private
Symbol::gen_getter_and_setter_by_con_ref	symbol_table_class.hpp	/^	gen_getter_and_setter_by_con_ref(name);$/;"	kind:p	class:Symbol	access:public	signature:(name)
Symbol::gen_getter_and_setter_by_val	symbol_table_class.hpp	/^	gen_getter_and_setter_by_val(type);$/;"	kind:p	class:Symbol	access:public	signature:(type)
Symbol::gen_getter_and_setter_by_val	symbol_table_class.hpp	/^	gen_getter_and_setter_by_val(var_type);$/;"	kind:p	class:Symbol	access:public	signature:(var_type)
Symbol::gen_getter_by_ref	symbol_table_class.hpp	/^	gen_getter_by_ref(data);$/;"	kind:p	class:Symbol	access:public	signature:(data)
Symbol::gen_setter_by_rval_ref	symbol_table_class.hpp	/^	gen_setter_by_rval_ref(name);$/;"	kind:p	class:Symbol	access:public	signature:(name)
Symbol::operator =	symbol_table_class.hpp	/^	inline Symbol& operator = (Symbol&& to_move) = default;$/;"	kind:p	class:Symbol	typeref:typename:Symbol &	access:public	signature:(Symbol && to_move)
Symbol::operator =	symbol_table_class.hpp	/^	inline Symbol& operator = (const Symbol& to_copy) = default;$/;"	kind:p	class:Symbol	typeref:typename:Symbol &	access:public	signature:(const Symbol & to_copy)
SymbolTable	symbol_table_class.cpp	/^SymbolTable::SymbolTable()$/;"	kind:f	class:SymbolTable	signature:()
SymbolTable	symbol_table_class.hpp	/^	SymbolTable();$/;"	kind:p	class:SymbolTable	access:public	signature:()
SymbolTable	symbol_table_class.hpp	/^class SymbolTable : public ScopedIdentTable<Symbol>$/;"	kind:c	inherits:ScopedIdentTable<Symbol>
SymbolTable::SymbolTable	symbol_table_class.cpp	/^SymbolTable::SymbolTable()$/;"	kind:f	class:SymbolTable	signature:()
SymbolTable::SymbolTable	symbol_table_class.hpp	/^	SymbolTable();$/;"	kind:p	class:SymbolTable	access:public	signature:()
SymbolTable::~SymbolTable	symbol_table_class.cpp	/^SymbolTable::~SymbolTable()$/;"	kind:f	class:SymbolTable	signature:()
SymbolTable::~SymbolTable	symbol_table_class.hpp	/^	virtual ~SymbolTable();$/;"	kind:p	class:SymbolTable	access:public	signature:()
VarName	symbol_table_class.hpp	/^	VarName,$/;"	kind:e	enum:SymType	access:public
Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2() : x(Type()), y(Type())$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:()
Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2(Vec2<OtherType>&& to_move)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(Vec2<OtherType> && to_move)
Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2(const Type1& s_x, const Type2& s_y)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(const Type1 & s_x,const Type2 & s_y)
Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2(const Vec2<OtherType>& to_copy)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(const Vec2<OtherType> & to_copy)
Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2$/;"	kind:c	namespace:liborangepower::containers
Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2<double>$/;"	kind:c	namespace:liborangepower::containers
Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2<float>$/;"	kind:c	namespace:liborangepower::containers
Vec2S16	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::s16> Vec2S16;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::s16>
Vec2S32	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::s32> Vec2S32;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::s32>
Vec2S64	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::s64> Vec2S64;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::s64>
Vec2U16	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::u16> Vec2U16;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::u16>
Vec2U32	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::u32> Vec2U32;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::u32>
Vec2U64	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::u64> Vec2U64;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::u64>
Vec2_dbl	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<double> Vec2_dbl;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<double>
Vec2_flt	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<float> Vec2_flt;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<float>
Visitor	visitor_class.hpp	/^class Visitor$/;"	kind:c
Visitor::visit_assign	visitor_class.hpp	/^	virtual void visit_assign(AstAssign* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstAssign * p)
Visitor::visit_binop	visitor_class.hpp	/^	virtual void visit_binop(AstBinop* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstBinop * p)
Visitor::visit_builtin_typename	visitor_class.hpp	/^	virtual void visit_builtin_typename(AstBuiltinTypename* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstBuiltinTypename * p)
Visitor::visit_constant	visitor_class.hpp	/^	virtual void visit_constant(AstConstant* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstConstant * p)
Visitor::visit_do_while	visitor_class.hpp	/^	virtual void visit_do_while(AstDoWhile* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstDoWhile * p)
Visitor::visit_ident	visitor_class.hpp	/^	virtual void visit_ident(AstIdent* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIdent * p)
Visitor::visit_if	visitor_class.hpp	/^	virtual void visit_if(AstIf* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIf * p)
Visitor::visit_if_chain	visitor_class.hpp	/^	virtual void visit_if_chain(AstIfChain* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIfChain * p)
Visitor::visit_indexed_assign	visitor_class.hpp	/^	virtual void visit_indexed_assign(AstIndexedAssign* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIndexedAssign * p)
Visitor::visit_indexed_load	visitor_class.hpp	/^	virtual void visit_indexed_load(AstIndexedLoad* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIndexedLoad * p)
Visitor::visit_list_ident	visitor_class.hpp	/^	virtual void visit_list_ident(AstListIdent* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstListIdent * p)
Visitor::visit_list_statement	visitor_class.hpp	/^	virtual void visit_list_statement(AstListStatement* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstListStatement * p)
Visitor::visit_load	visitor_class.hpp	/^	virtual void visit_load(AstLoad* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstLoad * p)
Visitor::visit_mk_scope	visitor_class.hpp	/^	virtual void visit_mk_scope(AstMkScope* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstMkScope * p)
Visitor::visit_multi_var_decl	visitor_class.hpp	/^	virtual void visit_multi_var_decl(AstMultiVarDecl* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstMultiVarDecl * p)
Visitor::visit_program	visitor_class.hpp	/^	virtual void visit_program(AstProgram* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstProgram * p)
Visitor::visit_rm_scope	visitor_class.hpp	/^	virtual void visit_rm_scope(AstRmScope* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstRmScope * p)
Visitor::visit_statements	visitor_class.hpp	/^	virtual void visit_statements(AstStatements* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstStatements * p)
Visitor::visit_var_decl_array	visitor_class.hpp	/^	virtual void visit_var_decl_array(AstVarDeclArray* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstVarDeclArray * p)
Visitor::visit_var_decl_simple	visitor_class.hpp	/^	virtual void visit_var_decl_simple(AstVarDeclSimple* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstVarDeclSimple * p)
Visitor::visit_var_decl_with_init	visitor_class.hpp	/^	virtual void visit_var_decl_with_init(AstVarDeclWithInit* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstVarDeclWithInit * p)
Visitor::visit_while	visitor_class.hpp	/^	virtual void visit_while(AstWhile* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstWhile * p)
Visitor::~Visitor	visitor_class.hpp	/^	virtual ~Visitor()$/;"	kind:f	class:Visitor	access:public	signature:()
YYSTYPE	misc_bison_stuff.hpp	/^#define YYSTYPE /;"	kind:d
__anon929f3355010a	ast_node_classes.hpp	/^	{$/;"	kind:u	class:AstNode	access:public
__anone389622d0102	liborangepower_src/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::parse_json	typeref:typename:bool	file:	signature:(Json::CharReaderBuilder& actual_rbuilder)
__anone389622d0202	liborangepower_src/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::write_json	file:	signature:(Json::StreamWriterBuilder& some_wbuilder)
__anone389622d0302	liborangepower_src/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anone389622d0402	liborangepower_src/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anone389622d0502	liborangepower_src/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__anone389622d0602	liborangepower_src/json_stuff.cpp	/^	{$/;"	kind:f	function:liborangepower::json::debug_print_json	typeref:typename:void	file:	signature:()
__arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:protected
__arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:protected
__arr	liborangepower_src/array_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type *	access:public
__arr	liborangepower_src/array_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:Type *	access:protected
__data	symbol_table_class.hpp	/^	std::vector<int> __data;$/;"	kind:m	class:Symbol	typeref:typename:std::vector<int>	access:private
__init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void __init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & first_value,const RemainingTypes &...remaining_values)
__init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void __init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & to_copy)
__instance	liborangepower_src/time_stuff.hpp	/^	InstanceType __instance;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:InstanceType	access:protected
__name	symbol_table_class.hpp	/^	std::string __name;$/;"	kind:m	class:Symbol	typeref:typename:std::string	access:private
__nodes	abstract_syntax_tree_class.hpp	/^	std::vector<std::unique_ptr<AstNode>> __nodes;$/;"	kind:m	class:AbstractSyntaxTree	typeref:typename:std::vector<std::unique_ptr<AstNode>>	access:protected
__num_vec	interpreter_class.hpp	/^	std::vector<int> __num_vec;$/;"	kind:m	class:Interpreter	typeref:typename:std::vector<int>	access:protected
__param_0	liborangepower_src/time_stuff.hpp	/^	int __param_0, __param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
__param_1	liborangepower_src/time_stuff.hpp	/^	int __param_0, __param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
__program	abstract_syntax_tree_class.hpp	/^	AstNode* __program = nullptr;$/;"	kind:m	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:protected
__scope_num	scoped_ident_table_class.hpp	/^	s64 __scope_num = -1;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:s64	access:protected
__size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t __size = 0;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:protected
__size	liborangepower_src/array_2d_helper_classes.hpp	/^	static constexpr size_t __size = __size_2d.x * __size_2d.y;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:protected
__size	liborangepower_src/array_helper_classes.hpp	/^	size_t __size = 0;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:protected
__size	liborangepower_src/array_helper_classes.hpp	/^	static constexpr size_t __size = _size;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:protected
__size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	Vec2<size_t> __size_2d;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Vec2<size_t>	access:protected
__str_vec	interpreter_class.hpp	/^	std::vector<std::string*> __str_vec;$/;"	kind:m	class:Interpreter	typeref:typename:std::vector<std::string * >	access:protected
__table	ident_table_class.hpp	/^	std::map<std::string, Type> __table;$/;"	kind:m	class:IdentTable	typeref:typename:std::map<std::string,Type>	access:private
__table	scoped_ident_table_class.hpp	/^	std::vector<OneLevelTable> __table;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:std::vector<OneLevelTable>	access:protected
__type	symbol_table_class.hpp	/^	SymType __type;$/;"	kind:m	class:Symbol	typeref:typename:SymType	access:private
__var_type	symbol_table_class.hpp	/^	BuiltinTypename __var_type;$/;"	kind:m	class:Symbol	typeref:typename:BuiltinTypename	access:private
_align2	liborangepower_src/misc_defines.hpp	/^#define _align2 /;"	kind:d
_align4	liborangepower_src/misc_defines.hpp	/^#define _align4 /;"	kind:d
abstract_syntax_tree_class_hpp	abstract_syntax_tree_class.hpp	/^#define abstract_syntax_tree_class_hpp$/;"	kind:d
accept	ast_node_classes.cpp	/^void AstNode::accept(Visitor* v)$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(Visitor * v)
accept	ast_node_classes.hpp	/^	virtual void accept(Visitor* v);$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstAssign::accept(Visitor* v)$/;"	kind:f	class:AstAssign	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstBinop::accept(Visitor* v)$/;"	kind:f	class:AstBinop	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstBuiltinTypename::accept(Visitor* v)$/;"	kind:f	class:AstBuiltinTypename	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstConstant::accept(Visitor* v)$/;"	kind:f	class:AstConstant	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstDoWhile::accept(Visitor* v)$/;"	kind:f	class:AstDoWhile	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstIdent::accept(Visitor* v)$/;"	kind:f	class:AstIdent	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstIf::accept(Visitor* v)$/;"	kind:f	class:AstIf	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstIfChain::accept(Visitor* v)$/;"	kind:f	class:AstIfChain	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstIndexedAssign::accept(Visitor* v)$/;"	kind:f	class:AstIndexedAssign	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstIndexedLoad::accept(Visitor* v)$/;"	kind:f	class:AstIndexedLoad	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstListIdent::accept(Visitor* v)$/;"	kind:f	class:AstListIdent	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstListStatement::accept(Visitor* v)$/;"	kind:f	class:AstListStatement	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstLoad::accept(Visitor* v)$/;"	kind:f	class:AstLoad	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstMkScope::accept(Visitor* v)$/;"	kind:f	class:AstMkScope	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstMultiVarDecl::accept(Visitor* v)$/;"	kind:f	class:AstMultiVarDecl	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstProgram::accept(Visitor* v)$/;"	kind:f	class:AstProgram	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstRmScope::accept(Visitor* v)$/;"	kind:f	class:AstRmScope	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstStatements::accept(Visitor* v)$/;"	kind:f	class:AstStatements	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstVarDeclArray::accept(Visitor* v)$/;"	kind:f	class:AstVarDeclArray	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstVarDeclSimple::accept(Visitor* v)$/;"	kind:f	class:AstVarDeclSimple	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstVarDeclWithInit::accept(Visitor* v)$/;"	kind:f	class:AstVarDeclWithInit	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.cpp	/^void AstWhile::accept(Visitor* v)$/;"	kind:f	class:AstWhile	typeref:typename:void	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstAssign	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstBinop	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstBuiltinTypename	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstConstant	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstDoWhile	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIdent	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIf	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIfChain	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIndexedAssign	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstIndexedLoad	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstListIdent	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstListStatement	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstLoad	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstMkScope	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstMultiVarDecl	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstProgram	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstRmScope	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstStatements	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstVarDeclArray	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstVarDeclSimple	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstVarDeclWithInit	typeref:typename:void	access:public	signature:(Visitor * v)
accept	specific_ast_node_classes.hpp	/^	void accept(Visitor* v);$/;"	kind:p	struct:AstWhile	typeref:typename:void	access:public	signature:(Visitor * v)
alignas_regular	liborangepower_src/misc_defines.hpp	/^#define alignas_regular /;"	kind:d
allocation_stuff_hpp	allocation_stuff.hpp	/^#define allocation_stuff_hpp$/;"	kind:d
anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstType& first_val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstType & first_val)
anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstType& first_val, const SecondType& next, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstType & first_val,const SecondType & next,RemArgTypes &&...rem_args)
append_child	ast_node_classes.cpp	/^void AstNode::append_child(AstNode* some_child)$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(AstNode * some_child)
append_child	ast_node_classes.hpp	/^	void append_child(AstNode* some_child);$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(AstNode * some_child)
append_to_list	ast_node_classes.cpp	/^void AstNode::append_to_list(AstNode* to_append)$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(AstNode * to_append)
append_to_list	ast_node_classes.hpp	/^	void append_to_list(AstNode* to_append);$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(AstNode * to_append)
arg_a	specific_ast_node_classes.hpp	/^	inline auto arg_a() { return at(0); }$/;"	kind:f	struct:AstBinop	typeref:typename:auto	access:public	signature:()
arg_b	specific_ast_node_classes.hpp	/^	inline auto arg_b() { return at(1); }$/;"	kind:f	struct:AstBinop	typeref:typename:auto	access:public	signature:()
arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:public	signature:() const
arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:public	signature:() const
arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type *	access:public	signature:() const
arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type *	access:public	signature:() const
arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(Type* dst, const void* src, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,const void * src,size_t num_elems)
arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<Type, size>& dst, const void* src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,const void * src)
arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<dst_type, size>& dst, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<dst_type,size> & dst,std::array<src_type,size> & src)
arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(Type* dst, int c, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,int c,size_t num_elems)
arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(std::array<Type, size>& dst, size_t src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,size_t src)
asm_comment	liborangepower_src/misc_defines.hpp	/^#define asm_comment(/;"	kind:d	signature:(stuff)
ast	abstract_syntax_tree_class.cpp	/^AbstractSyntaxTree ast;$/;"	kind:v	typeref:typename:AbstractSyntaxTree
ast_gen_builtin_typename	abstract_syntax_tree_class.cpp	/^YYSTYPE ast_gen_builtin_typename(char* some_typename)$/;"	kind:f	typeref:typename:YYSTYPE	signature:(char * some_typename)
ast_gen_builtin_typename	misc_bison_stuff.hpp	/^extern YYSTYPE ast_gen_builtin_typename(char* some_typename);$/;"	kind:p	typeref:typename:YYSTYPE	signature:(char * some_typename)
ast_gen_constant	abstract_syntax_tree_class.cpp	/^YYSTYPE ast_gen_constant(int some_num)$/;"	kind:f	typeref:typename:YYSTYPE	signature:(int some_num)
ast_gen_constant	misc_bison_stuff.hpp	/^extern YYSTYPE ast_gen_constant(int some_num);$/;"	kind:p	typeref:typename:YYSTYPE	signature:(int some_num)
ast_gen_ident	abstract_syntax_tree_class.cpp	/^YYSTYPE ast_gen_ident(char* some_ident)$/;"	kind:f	typeref:typename:YYSTYPE	signature:(char * some_ident)
ast_gen_ident	misc_bison_stuff.hpp	/^extern YYSTYPE ast_gen_ident(char* some_ident);$/;"	kind:p	typeref:typename:YYSTYPE	signature:(char * some_ident)
ast_gen_initial_binop	abstract_syntax_tree_class.cpp	/^YYSTYPE ast_gen_initial_binop(char* some_op)$/;"	kind:f	typeref:typename:YYSTYPE	signature:(char * some_op)
ast_gen_initial_binop	misc_bison_stuff.hpp	/^extern YYSTYPE ast_gen_initial_binop(char* some_op);$/;"	kind:p	typeref:typename:YYSTYPE	signature:(char * some_op)
ast_node_classes_hpp	ast_node_classes.hpp	/^#define ast_node_classes_hpp$/;"	kind:d
at	ast_node_classes.hpp	/^	inline AstNode* at(size_t index)$/;"	kind:f	class:AstNode	typeref:typename:AstNode *	access:protected	signature:(size_t index)
at	ident_table_class.hpp	/^	inline Type& at(const std::string& some_name)$/;"	kind:f	class:IdentTable	typeref:typename:Type &	access:public	signature:(const std::string & some_name)
at	ident_table_class.hpp	/^	inline const Type& at(const std::string& some_name) const$/;"	kind:f	class:IdentTable	typeref:typename:const Type &	access:public	signature:(const std::string & some_name) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
at	scoped_ident_table_class.hpp	/^	inline auto& at(size_t table_index)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:auto &	access:public	signature:(size_t table_index)
at	scoped_ident_table_class.hpp	/^	inline const auto& at(size_t table_index) const$/;"	kind:f	class:ScopedIdentTable	typeref:typename:const auto &	access:public	signature:(size_t table_index) const
back_up	liborangepower_src/prev_curr_pair_class.hpp	/^	inline void back_up()$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:()
back_up_and_update	liborangepower_src/prev_curr_pair_class.hpp	/^	inline void back_up_and_update(const type& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(const type & n_curr)
back_up_and_update	liborangepower_src/prev_curr_pair_class.hpp	/^	inline void back_up_and_update(type&& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(type && n_curr)
binop	ast_node_classes.hpp	/^		AstNodeBinop binop;$/;"	kind:m	union:AstNode::__anon929f3355010a	typeref:typename:AstNodeBinop	access:public
bitwise	liborangepower_src/misc_bitwise_funcs.hpp	/^namespace bitwise$/;"	kind:n	namespace:liborangepower
bprange_to_mask	liborangepower_src/misc_defines.hpp	/^#define bprange_to_mask(/;"	kind:d	signature:(bit_pos_hi,bit_pos_lo)
bprange_to_shifted_mask	liborangepower_src/misc_defines.hpp	/^#define bprange_to_shifted_mask(/;"	kind:d	signature:(bit_pos_hi,bit_pos_lo)
builtin_scope_level	scoped_ident_table_class.hpp	/^	static constexpr s64 builtin_scope_level = 0;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:s64	access:public
builtin_typename	ast_node_classes.hpp	/^		BuiltinTypename builtin_typename;$/;"	kind:m	union:AstNode::__anon929f3355010a	typeref:typename:BuiltinTypename	access:public
builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstMultiVarDecl	typeref:typename:auto	access:public	signature:()
builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:auto	access:public	signature:()
builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstVarDeclSimple	typeref:typename:auto	access:public	signature:()
builtin_typename_node	specific_ast_node_classes.hpp	/^	inline auto builtin_typename_node() { return at(0); }$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:auto	access:public	signature:()
children	ast_node_classes.hpp	/^	std::vector<AstNode*> children;$/;"	kind:m	class:AstNode	typeref:typename:std::vector<AstNode * >	access:public
clamp_to_range	liborangepower_src/range_funcs.hpp	/^inline Type clamp_to_range(Type range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:Type	signature:(Type range_start_inclusive,Type range_end_exclusive,Type to_clamp)
clear_and_set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits(Type& to_change, size_t clear_mask,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t clear_mask,size_t set_mask)
clear_and_set_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits_with_range(Type& to_change, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
clear_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_bits(Type& to_clear, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_clear,size_t mask)
cmpeq_array	liborangepower_src/misc_utility_funcs.hpp	/^bool cmpeq_array(FirstType* first_arr, SecondType* second_arr, size_t size)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(FirstType * first_arr,SecondType * second_arr,size_t size)
cmpeq_array	liborangepower_src/misc_utility_funcs.hpp	/^bool cmpeq_array(FirstType* first_arr, SecondType* second_arr, size_t size)$/;"	kind:p	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(FirstType * first_arr,SecondType * second_arr,size_t size)
code_generator_class_hpp	code_generator_class.hpp	/^#define code_generator_class_hpp$/;"	kind:d
containers	liborangepower_src/array_2d_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/array_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/prev_curr_pair_class.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
containers	liborangepower_src/vec2_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
contains	ident_table_class.hpp	/^	inline bool contains(const std::string& some_name) const$/;"	kind:f	class:IdentTable	typeref:typename:bool	access:public	signature:(const std::string & some_name) const
cstm_intdup	abstract_syntax_tree_class.cpp	/^extern const int* cstm_intdup(int num);$/;"	kind:p	typeref:typename:const int *	file:	signature:(int num)
cstm_intdup	allocation_stuff.cpp	/^const int* cstm_intdup(int num)$/;"	kind:f	typeref:typename:const int *	signature:(int num)
cstm_intdup	allocation_stuff.hpp	/^const int* cstm_intdup(int num);$/;"	kind:p	typeref:typename:const int *	signature:(int num)
cstm_strdup	abstract_syntax_tree_class.cpp	/^extern const char* cstm_strdup(char* some_c_str);$/;"	kind:p	typeref:typename:const char *	file:	signature:(char * some_c_str)
cstm_strdup	allocation_stuff.cpp	/^const char* cstm_strdup(char* some_c_str)$/;"	kind:f	typeref:typename:const char *	signature:(char * some_c_str)
cstm_strdup	allocation_stuff.hpp	/^const char* cstm_strdup(char* some_c_str);$/;"	kind:p	typeref:typename:const char *	signature:(char * some_c_str)
curr	liborangepower_src/prev_curr_pair_class.hpp	/^	type prev, curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:type	access:public
custom_abs	liborangepower_src/misc_utility_funcs.hpp	/^inline Type custom_abs(const Type& val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:Type	signature:(const Type & val)
custom_abs	liborangepower_src/vec2_classes.hpp	/^inline Vec2<Type> custom_abs(const Vec2<Type>& val)$/;"	kind:f	namespace:liborangepower::containers	typeref:typename:Vec2<Type>	signature:(const Vec2<Type> & val)
debug_print_json	liborangepower_src/json_stuff.cpp	/^void debug_print_json(const Json::Value& some_value, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os,size_t tabs_level)
debug_print_json	liborangepower_src/json_stuff.hpp	/^inline void debug_print_json(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout,size_t tabs_level=0)
debug_print_json	liborangepower_src/json_stuff.hpp	/^void debug_print_json(const Json::Value& some_value, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout,size_t tabs_level=0)
dim_node	specific_ast_node_classes.hpp	/^	inline auto dim_node() { return at(2); }$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:auto	access:public	signature:()
dot_prod	liborangepower_src/vec2_classes.hpp	/^	inline Type dot_prod(const Vec2<OtherType>& to_dot) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public	signature:(const Vec2<OtherType> & to_dot) const
end_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
err	liborangepower_src/json_stuff.hpp	/^void err(arg_types&&... args)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(arg_types &&...args)
expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(0); }$/;"	kind:f	struct:AstIf	typeref:typename:auto	access:public	signature:()
expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(0); }$/;"	kind:f	struct:AstIfChain	typeref:typename:auto	access:public	signature:()
expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(0); }$/;"	kind:f	struct:AstWhile	typeref:typename:auto	access:public	signature:()
expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(1); }$/;"	kind:f	struct:AstAssign	typeref:typename:auto	access:public	signature:()
expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(1); }$/;"	kind:f	struct:AstDoWhile	typeref:typename:auto	access:public	signature:()
expr	specific_ast_node_classes.hpp	/^	inline auto expr() { return at(2); }$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:auto	access:public	signature:()
find	scoped_ident_table_class.hpp	/^	Type* find(const std::string& some_name) __attribute__((noinline))$/;"	kind:f	class:ScopedIdentTable	typeref:typename:Type *	access:public	signature:(const std::string & some_name)
find_in_this_level	scoped_ident_table_class.hpp	/^	inline Type* find_in_this_level(const std::string& some_name)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:Type *	access:public	signature:(const std::string & some_name)
find_pos_after_end_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	virtual size_t find_pos_after_end_of_word(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:(size_t & i)
find_pos_after_end_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	virtual size_t find_pos_after_end_of_word(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:size_t	access:public	signature:(size_t & i)
find_start_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	size_t find_start_of_word(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:(size_t & i)
fprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& fprintout(std::ostream& out_file, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & out_file,ArgTypes &&...args)
func	liborangepower_src/misc_output_classes.hpp	/^	static inline void func(std::ostream& os)$/;"	kind:f	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:void	access:private	signature:(std::ostream & os)
func	liborangepower_src/misc_output_classes.hpp	/^	static void func(std::ostream& os, const FirstType& first_val, $/;"	kind:f	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:void	access:private	signature:(std::ostream & os,const FirstType & first_val,RemArgTypes &&...rem_args)
gen_assign	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_assign(AstNode* some_ident_node, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node,AstNode * some_expr)
gen_assign	abstract_syntax_tree_class.hpp	/^	AstNode* gen_assign(AstNode* some_ident_node, AstNode* some_expr);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node,AstNode * some_expr)
gen_builtin_typename	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_builtin_typename$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(char * some_typename)
gen_builtin_typename	abstract_syntax_tree_class.hpp	/^	AstNode* gen_builtin_typename(char* some_typename);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(char * some_typename)
gen_constant	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_constant(int some_num)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(int some_num)
gen_constant	abstract_syntax_tree_class.hpp	/^	AstNode* gen_constant(int some_num);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(int some_num)
gen_do_while_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_do_while_statement$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_statement,AstNode * some_expr)
gen_do_while_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_do_while_statement(AstNode* some_statement,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_statement,AstNode * some_expr)
gen_finished_binop	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_finished_binop$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_incomplete_binop,AstNode * a,AstNode * b)
gen_finished_binop	abstract_syntax_tree_class.hpp	/^	AstNode* gen_finished_binop(AstNode* some_incomplete_binop, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_incomplete_binop,AstNode * a,AstNode * b)
gen_generic_getter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_generic_getter_by_con_ref(/;"	kind:d	signature:(prefix,suffix)
gen_generic_getter_by_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_generic_getter_by_ref(/;"	kind:d	signature:(prefix,suffix)
gen_generic_getter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_generic_getter_by_val(/;"	kind:d	signature:(prefix,suffix)
gen_generic_setter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_generic_setter_by_con_ref(/;"	kind:d	signature:(prefix,suffix)
gen_generic_setter_by_rval_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_generic_setter_by_rval_ref(/;"	kind:d	signature:(prefix,suffix)
gen_generic_setter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_generic_setter_by_val(/;"	kind:d	signature:(prefix,suffix)
gen_getter_and_setter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_getter_and_setter_by_con_ref(/;"	kind:d	signature:(stuff)
gen_getter_and_setter_by_con_ref	symbol_table_class.hpp	/^	gen_getter_and_setter_by_con_ref(name);$/;"	kind:p	class:Symbol	access:public	signature:(name)
gen_getter_and_setter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_getter_and_setter_by_val(/;"	kind:d	signature:(stuff)
gen_getter_and_setter_by_val	symbol_table_class.hpp	/^	gen_getter_and_setter_by_val(type);$/;"	kind:p	class:Symbol	access:public	signature:(type)
gen_getter_and_setter_by_val	symbol_table_class.hpp	/^	gen_getter_and_setter_by_val(var_type);$/;"	kind:p	class:Symbol	access:public	signature:(var_type)
gen_getter_by_con_ref	ident_table_class.hpp	/^	gen_getter_by_con_ref(table);$/;"	kind:p	class:IdentTable	access:public	signature:(table)
gen_getter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_getter_by_con_ref(/;"	kind:d	signature:(suffix)
gen_getter_by_con_ref	liborangepower_src/time_stuff.hpp	/^	gen_getter_by_con_ref(instance);$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:(instance)
gen_getter_by_con_ref	scoped_ident_table_class.hpp	/^	gen_getter_by_con_ref(table);$/;"	kind:p	class:ScopedIdentTable	access:public	signature:(table)
gen_getter_by_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_getter_by_ref(/;"	kind:d	signature:(suffix)
gen_getter_by_ref	scoped_ident_table_class.hpp	/^	gen_getter_by_ref(table);$/;"	kind:p	class:ScopedIdentTable	access:public	signature:(table)
gen_getter_by_ref	symbol_table_class.hpp	/^	gen_getter_by_ref(data);$/;"	kind:p	class:Symbol	access:public	signature:(data)
gen_getter_by_val	abstract_syntax_tree_class.hpp	/^	gen_getter_by_val(program);$/;"	kind:p	class:AbstractSyntaxTree	access:public	signature:(program)
gen_getter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_getter_by_val(/;"	kind:d	signature:(suffix)
gen_getter_by_val	liborangepower_src/time_stuff.hpp	/^	gen_getter_by_val(param_0);$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:(param_0)
gen_getter_by_val	liborangepower_src/time_stuff.hpp	/^	gen_getter_by_val(param_1);$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:(param_1)
gen_getter_by_val	scoped_ident_table_class.hpp	/^	gen_getter_by_val(scope_num);$/;"	kind:p	class:ScopedIdentTable	access:public	signature:(scope_num)
gen_ident	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_ident(const char* some_ident)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(const char * some_ident)
gen_ident	abstract_syntax_tree_class.hpp	/^	AstNode* gen_ident(const char* some_ident);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(const char * some_ident)
gen_if_chain_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_if_chain_statement(AstNode* some_expr,$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_expr,AstNode * some_statement_if,AstNode * some_statement_else)
gen_if_chain_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_if_chain_statement(AstNode* some_expr,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_expr,AstNode * some_statement_if,AstNode * some_statement_else)
gen_if_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_if_statement(AstNode* some_expr, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_expr,AstNode * some_statement)
gen_if_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_if_statement(AstNode* some_expr, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_expr,AstNode * some_statement)
gen_indexed_assign	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_indexed_assign(AstNode* some_ident_node,$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node,AstNode * some_index,AstNode * some_rhs)
gen_indexed_assign	abstract_syntax_tree_class.hpp	/^	AstNode* gen_indexed_assign(AstNode* some_ident_node,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node,AstNode * some_index,AstNode * some_rhs)
gen_indexed_load	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_indexed_load(AstNode* some_ident_node, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node,AstNode * some_index)
gen_indexed_load	abstract_syntax_tree_class.hpp	/^	AstNode* gen_indexed_load(AstNode* some_ident_node, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node,AstNode * some_index)
gen_list_ident	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_list_ident()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
gen_list_ident	abstract_syntax_tree_class.hpp	/^	AstNode* gen_list_ident();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
gen_list_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_list_statement()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
gen_list_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_list_statement();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
gen_load	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_load(AstNode* some_ident_node)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_ident_node)
gen_load	abstract_syntax_tree_class.hpp	/^	AstNode* gen_load(AstNode* some_ident_node);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_ident_node)
gen_mkscope	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_mkscope()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
gen_mkscope	abstract_syntax_tree_class.hpp	/^	AstNode* gen_mkscope();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
gen_program	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_program(AstNode* some_statements)$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_statements)
gen_program	abstract_syntax_tree_class.hpp	/^	AstNode* gen_program(AstNode* some_statements);$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_statements)
gen_rmscope	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_rmscope()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:()
gen_rmscope	abstract_syntax_tree_class.hpp	/^	AstNode* gen_rmscope();$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
gen_setter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_setter_by_con_ref(/;"	kind:d	signature:(suffix)
gen_setter_by_rval_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_setter_by_rval_ref(/;"	kind:d	signature:(suffix)
gen_setter_by_rval_ref	symbol_table_class.hpp	/^	gen_setter_by_rval_ref(name);$/;"	kind:p	class:Symbol	access:public	signature:(name)
gen_setter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_setter_by_val(/;"	kind:d	signature:(suffix)
gen_statements	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_statements(AstNode* some_mkscope, $/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_mkscope,AstNode * some_list_statement,AstNode * some_rmscope)
gen_statements	abstract_syntax_tree_class.hpp	/^	AstNode* gen_statements(AstNode* some_mkscope, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_mkscope,AstNode * some_list_statement,AstNode * some_rmscope)
gen_static_generic_getter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_generic_getter_by_con_ref(/;"	kind:d	signature:(prefix,suffix)
gen_static_generic_getter_by_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_generic_getter_by_ref(/;"	kind:d	signature:(prefix,suffix)
gen_static_generic_getter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_generic_getter_by_val(/;"	kind:d	signature:(prefix,suffix)
gen_static_generic_setter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_generic_setter_by_con_ref(/;"	kind:d	signature:(prefix,suffix)
gen_static_generic_setter_by_rval_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_generic_setter_by_rval_ref(/;"	kind:d	signature:(prefix,suffix)
gen_static_generic_setter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_generic_setter_by_val(/;"	kind:d	signature:(prefix,suffix)
gen_static_getter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_getter_by_con_ref(/;"	kind:d	signature:(suffix)
gen_static_getter_by_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_getter_by_ref(/;"	kind:d	signature:(suffix)
gen_static_getter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_getter_by_val(/;"	kind:d	signature:(suffix)
gen_static_setter_by_con_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_setter_by_con_ref(/;"	kind:d	signature:(suffix)
gen_static_setter_by_rval_ref	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_setter_by_rval_ref(/;"	kind:d	signature:(suffix)
gen_static_setter_by_val	liborangepower_src/gen_getter_setter_defines.hpp	/^#define gen_static_setter_by_val(/;"	kind:d	signature:(suffix)
gen_var_decl_array	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_var_decl_array$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_dim_node)
gen_var_decl_array	abstract_syntax_tree_class.hpp	/^	AstNode* gen_var_decl_array(AstNode* some_typename_node, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_dim)
gen_var_decl_simple	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_var_decl_simple$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_typename_node,AstNode * some_ident_node)
gen_var_decl_simple	abstract_syntax_tree_class.hpp	/^	AstNode* gen_var_decl_simple(AstNode* some_typename_node, $/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_typename_node,AstNode * some_ident_node)
gen_var_decl_with_init	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_var_decl_with_init$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_expr)
gen_var_decl_with_init	abstract_syntax_tree_class.hpp	/^	AstNode* gen_var_decl_with_init(AstNode* some_typename_node,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_typename_node,AstNode * some_ident_node,AstNode * some_expr)
gen_while_statement	abstract_syntax_tree_class.cpp	/^AstNode* AbstractSyntaxTree::gen_while_statement(AstNode* some_expr,$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	signature:(AstNode * some_expr,AstNode * some_statement)
gen_while_statement	abstract_syntax_tree_class.hpp	/^	AstNode* gen_while_statement(AstNode* some_expr,$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:(AstNode * some_expr,AstNode * some_statement)
generate_float_pt_vec2_extra_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_float_pt_vec2_extra_class_contents(double);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(double)
generate_float_pt_vec2_extra_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_float_pt_vec2_extra_class_contents(float);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(float)
generate_float_pt_vec2_extra_class_contents	liborangepower_src/vec2_classes.hpp	/^#define generate_float_pt_vec2_extra_class_contents(/;"	kind:d	signature:(specific_type)
generate_specific_vec2_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_specific_vec2_class_contents(double);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(double)
generate_specific_vec2_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_specific_vec2_class_contents(float);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(float)
generate_specific_vec2_class_contents	liborangepower_src/vec2_classes.hpp	/^#define generate_specific_vec2_class_contents(/;"	kind:d	signature:(specific_type)
get_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits(Type to_get_from, size_t mask, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t mask,size_t shift=0)
get_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits_with_range(Type to_get_from, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
get_hrc_now	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
get_hrc_now_time_t	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now_time_t()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
get_initial_seed	liborangepower_src/time_stuff.hpp	/^	inline SeedType get_initial_seed()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:SeedType	access:protected	signature:()
get_json_value_type_as_str	liborangepower_src/json_stuff.cpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^inline std::string get_json_value_type_as_str(Json::Value* iter)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(Json::Value * iter)
get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value);$/;"	kind:p	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
get_substr_size	liborangepower_src/str_split_helper_classes.hpp	/^	static inline size_t get_substr_size(const size_t start, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:(const size_t start,const size_t pos_after_end)
has_changed	liborangepower_src/prev_curr_pair_class.hpp	/^	inline bool has_changed() const$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:bool	access:public	signature:() const
height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstAssign	typeref:typename:auto	access:public	signature:()
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:auto	access:public	signature:()
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstIndexedLoad	typeref:typename:auto	access:public	signature:()
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(0); }$/;"	kind:f	struct:AstLoad	typeref:typename:auto	access:public	signature:()
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(1); }$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:auto	access:public	signature:()
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(1); }$/;"	kind:f	struct:AstVarDeclSimple	typeref:typename:auto	access:public	signature:()
ident_node	specific_ast_node_classes.hpp	/^	inline auto ident_node() { return at(1); }$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:auto	access:public	signature:()
ident_table_class_hpp	ident_table_class.hpp	/^#define ident_table_class_hpp$/;"	kind:d
in_range	liborangepower_src/range_funcs.hpp	/^inline bool in_range(Type range_start_inclusive, Type range_end_exclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(Type range_start_inclusive,Type range_end_exclusive,Type to_check)
in_range_inclusive	liborangepower_src/range_funcs.hpp	/^inline bool in_range_inclusive(Type range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(Type range_start_inclusive,Type range_end_inclusive,Type to_check)
increment_i	liborangepower_src/str_split_helper_classes.hpp	/^	inline void increment_i(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:void	access:public	signature:(size_t & i)
index_in_to_split	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool index_in_to_split(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:public	signature:(size_t i) const
index_node	specific_ast_node_classes.hpp	/^	inline auto index_node() { return at(1); }$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:auto	access:public	signature:()
index_node	specific_ast_node_classes.hpp	/^	inline auto index_node() { return at(1); }$/;"	kind:f	struct:AstIndexedLoad	typeref:typename:auto	access:public	signature:()
init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s___arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:void	access:public	signature:(Type * s___arr)
init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s___arr, const Vec2<size_t>& s_size_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:void	access:public	signature:(Type * s___arr,const Vec2<size_t> & s_size_2d)
init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:void	access:public	signature:(Type * s_the_array)
init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:void	access:public	signature:(Type * s_the_array,size_t s_size)
init	liborangepower_src/str_split_helper_classes.hpp	/^	inline void init(StrType&& n_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:void	access:public	signature:(StrType && n_to_split)
init	liborangepower_src/str_split_helper_classes.hpp	/^	inline void init(const StrType& n_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:void	access:public	signature:(const StrType & n_to_split)
init_array	liborangepower_src/misc_utility_funcs.hpp	/^inline void init_array(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const AllTheTypes &...all_the_values)
insert_or_assign	ident_table_class.hpp	/^	inline void insert_or_assign(Type&& to_insert_or_assign)$/;"	kind:f	class:IdentTable	typeref:typename:void	access:public	signature:(Type && to_insert_or_assign)
insert_or_assign	ident_table_class.hpp	/^	inline void insert_or_assign(const Type& to_insert_or_assign)$/;"	kind:f	class:IdentTable	typeref:typename:void	access:public	signature:(const Type & to_insert_or_assign)
insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(Type&& to_insert_or_assign)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(Type && to_insert_or_assign)
insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(const Type& to_insert_or_assign)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(const Type & to_insert_or_assign)
insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(size_t level, $/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(size_t level,const Type & to_insert_or_assign)
insert_or_assign	scoped_ident_table_class.hpp	/^	inline void insert_or_assign(size_t level, Type&& to_insert_or_assign)$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:(size_t level,Type && to_insert_or_assign)
integer_types	liborangepower_src/misc_types.hpp	/^namespace integer_types$/;"	kind:n	namespace:liborangepower
internal_line_num	liborangepower_src/str_split_helper_classes.hpp	/^	size_t internal_line_num = 1;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:protected
internal_num_consec_backslashes	liborangepower_src/str_split_helper_classes.hpp	/^	size_t internal_num_consec_backslashes = 0;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:protected
internal_prev_i	liborangepower_src/str_split_helper_classes.hpp	/^	size_t internal_prev_i;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:protected
internal_to_split	liborangepower_src/str_split_helper_classes.hpp	/^	StrType internal_to_split;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrType	access:protected
interpret	interpreter_class.cpp	/^void Interpreter::interpret()$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:()
interpret	interpreter_class.hpp	/^	void interpret();$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:()
interpreter	interpreter_class.cpp	/^Interpreter interpreter;$/;"	kind:v	typeref:typename:Interpreter
interpreter_class_hpp	interpreter_class.hpp	/^#define interpreter_class_hpp$/;"	kind:d
json	liborangepower_src/json_stuff.cpp	/^namespace json$/;"	kind:n	namespace:liborangepower	file:
json	liborangepower_src/json_stuff.hpp	/^namespace json$/;"	kind:n	namespace:liborangepower
liborangepower	liborangepower_src/array_2d_helper_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/array_helper_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/json_stuff.cpp	/^namespace liborangepower$/;"	kind:n	file:
liborangepower	liborangepower_src/json_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/memwhatever_wrappers.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_bitwise_funcs.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_output_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_types.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/misc_utility_funcs.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/prev_curr_pair_class.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/quoted_str_converter_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/range_funcs.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/str_split_helper_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/time_stuff.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower	liborangepower_src/vec2_classes.hpp	/^namespace liborangepower$/;"	kind:n
liborangepower::bitwise	liborangepower_src/misc_bitwise_funcs.hpp	/^namespace bitwise$/;"	kind:n	namespace:liborangepower
liborangepower::bitwise::clear_and_set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits(Type& to_change, size_t clear_mask,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t clear_mask,size_t set_mask)
liborangepower::bitwise::clear_and_set_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_and_set_bits_with_range(Type& to_change, size_t val,$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_change,size_t val,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::clear_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void clear_bits(Type& to_clear, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_clear,size_t mask)
liborangepower::bitwise::get_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits(Type to_get_from, size_t mask, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t mask,size_t shift=0)
liborangepower::bitwise::get_bits_with_range	liborangepower_src/misc_bitwise_funcs.hpp	/^inline constexpr Type get_bits_with_range(Type to_get_from, $/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:Type	signature:(Type to_get_from,size_t bit_pos_range_hi,size_t bit_pos_range_lo)
liborangepower::bitwise::set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void set_bits(Type& to_set, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_set,size_t mask)
liborangepower::containers	liborangepower_src/array_2d_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/array_helper_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/prev_curr_pair_class.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers	liborangepower_src/vec2_classes.hpp	/^namespace containers$/;"	kind:n	namespace:liborangepower
liborangepower::containers::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class Array2dHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::Array2dHelper::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper()$/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:()
liborangepower::containers::Array2dHelper::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(Type* s___arr, $/;"	kind:f	class:liborangepower::containers::Array2dHelper	access:public	signature:(Type * s___arr,const Vec2<size_t> & s_size_2d)
liborangepower::containers::Array2dHelper::Array2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline Array2dHelper(const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	access:public	signature:(const Array2dHelper & to_copy)
liborangepower::containers::Array2dHelper::__arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:protected
liborangepower::containers::Array2dHelper::__size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t __size = 0;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:protected
liborangepower::containers::Array2dHelper::__size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	Vec2<size_t> __size_2d;$/;"	kind:m	class:liborangepower::containers::Array2dHelper	typeref:typename:Vec2<size_t>	access:protected
liborangepower::containers::Array2dHelper::arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type *	access:public	signature:() const
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
liborangepower::containers::Array2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
liborangepower::containers::Array2dHelper::height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::Array2dHelper::init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s___arr, const Vec2<size_t>& s_size_2d)$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:void	access:public	signature:(Type * s___arr,const Vec2<size_t> & s_size_2d)
liborangepower::containers::Array2dHelper::operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	Array2dHelper& operator = (const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	typeref:typename:Array2dHelper &	access:public	signature:(const Array2dHelper & to_copy)
liborangepower::containers::Array2dHelper::size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::Array2dHelper::size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
liborangepower::containers::Array2dHelper::width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^class ArrayCsz2dHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::ArrayCsz2dHelper::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:()
liborangepower::containers::ArrayCsz2dHelper::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(Type* s___arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(Type * s___arr)
liborangepower::containers::ArrayCsz2dHelper::ArrayCsz2dHelper	liborangepower_src/array_2d_helper_classes.hpp	/^	inline ArrayCsz2dHelper(const ArrayCsz2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	access:public	signature:(const ArrayCsz2dHelper & to_copy)
liborangepower::containers::ArrayCsz2dHelper::__arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:protected
liborangepower::containers::ArrayCsz2dHelper::__size	liborangepower_src/array_2d_helper_classes.hpp	/^	static constexpr size_t __size = __size_2d.x * __size_2d.y;$/;"	kind:m	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:protected
liborangepower::containers::ArrayCsz2dHelper::arr	liborangepower_src/array_2d_helper_classes.hpp	/^	Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type *	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2<size_t>& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2<size_t> & offset_2d)
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(const Vec2S32& offset_2d)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(const Vec2S32 & offset_2d)
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	Type& at(size_t x, size_t y)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:Type &	access:public	signature:(size_t x,size_t y)
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2<size_t>& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2<size_t> & offset_2d) const
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(const Vec2S32& offset_2d) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(const Vec2S32 & offset_2d) const
liborangepower::containers::ArrayCsz2dHelper::at	liborangepower_src/array_2d_helper_classes.hpp	/^	const Type& at(size_t x, size_t y) const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Type &	access:public	signature:(size_t x,size_t y) const
liborangepower::containers::ArrayCsz2dHelper::height	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t height() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::init	liborangepower_src/array_2d_helper_classes.hpp	/^	void init(Type* s___arr)$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:void	access:public	signature:(Type * s___arr)
liborangepower::containers::ArrayCsz2dHelper::operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	ArrayCsz2dHelper& operator = (const ArrayCsz2dHelper& to_copy) $/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:ArrayCsz2dHelper &	access:public	signature:(const ArrayCsz2dHelper & to_copy)
liborangepower::containers::ArrayCsz2dHelper::size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
liborangepower::containers::ArrayCsz2dHelper::width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayCszHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::ArrayCszHelper::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper()$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:()
liborangepower::containers::ArrayCszHelper::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(Type* s_the_array) : __arr(s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(Type * s_the_array)
liborangepower::containers::ArrayCszHelper::ArrayCszHelper	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper(const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	access:public	signature:(const ArrayCszHelper & to_copy)
liborangepower::containers::ArrayCszHelper::__arr	liborangepower_src/array_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type *	access:public
liborangepower::containers::ArrayCszHelper::__size	liborangepower_src/array_helper_classes.hpp	/^	static constexpr size_t __size = _size;$/;"	kind:m	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:protected
liborangepower::containers::ArrayCszHelper::arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type *	access:public	signature:() const
liborangepower::containers::ArrayCszHelper::at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
liborangepower::containers::ArrayCszHelper::at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
liborangepower::containers::ArrayCszHelper::init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array)$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:void	access:public	signature:(Type * s_the_array)
liborangepower::containers::ArrayCszHelper::operator =	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper& operator = (const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	typeref:typename:ArrayCszHelper &	access:public	signature:(const ArrayCszHelper & to_copy)
liborangepower::containers::ArrayCszHelper::size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^class ArrayHelper$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::ArrayHelper::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper()$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:()
liborangepower::containers::ArrayHelper::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	access:public	signature:(Type * s_the_array,size_t s_size)
liborangepower::containers::ArrayHelper::ArrayHelper	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper(const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	access:public	signature:(const ArrayHelper & to_copy)
liborangepower::containers::ArrayHelper::__arr	liborangepower_src/array_helper_classes.hpp	/^	Type* __arr = nullptr;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:Type *	access:protected
liborangepower::containers::ArrayHelper::__size	liborangepower_src/array_helper_classes.hpp	/^	size_t __size = 0;$/;"	kind:m	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:protected
liborangepower::containers::ArrayHelper::arr	liborangepower_src/array_helper_classes.hpp	/^	const Type* arr() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type *	access:public	signature:() const
liborangepower::containers::ArrayHelper::at	liborangepower_src/array_helper_classes.hpp	/^	Type& at(size_t offset)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:Type &	access:public	signature:(size_t offset)
liborangepower::containers::ArrayHelper::at	liborangepower_src/array_helper_classes.hpp	/^	const Type& at(size_t offset) const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:const Type &	access:public	signature:(size_t offset) const
liborangepower::containers::ArrayHelper::init	liborangepower_src/array_helper_classes.hpp	/^	void init(Type* s_the_array, size_t s_size)$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:void	access:public	signature:(Type * s_the_array,size_t s_size)
liborangepower::containers::ArrayHelper::operator =	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper& operator = (const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	typeref:typename:ArrayHelper &	access:public	signature:(const ArrayHelper & to_copy)
liborangepower::containers::ArrayHelper::size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:public	signature:() const
liborangepower::containers::PrevCurrPair	liborangepower_src/prev_curr_pair_class.hpp	/^class PrevCurrPair$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::PrevCurrPair::back_up	liborangepower_src/prev_curr_pair_class.hpp	/^	inline void back_up()$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:()
liborangepower::containers::PrevCurrPair::back_up_and_update	liborangepower_src/prev_curr_pair_class.hpp	/^	inline void back_up_and_update(const type& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(const type & n_curr)
liborangepower::containers::PrevCurrPair::back_up_and_update	liborangepower_src/prev_curr_pair_class.hpp	/^	inline void back_up_and_update(type&& n_curr)$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:void	access:public	signature:(type && n_curr)
liborangepower::containers::PrevCurrPair::curr	liborangepower_src/prev_curr_pair_class.hpp	/^	type prev, curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:type	access:public
liborangepower::containers::PrevCurrPair::has_changed	liborangepower_src/prev_curr_pair_class.hpp	/^	inline bool has_changed() const$/;"	kind:f	class:liborangepower::containers::PrevCurrPair	typeref:typename:bool	access:public	signature:() const
liborangepower::containers::PrevCurrPair::prev	liborangepower_src/prev_curr_pair_class.hpp	/^	type prev, curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:type	access:public
liborangepower::containers::SizeT2d	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<size_t> SizeT2d;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<size_t>
liborangepower::containers::Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2<double>$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::Vec2	liborangepower_src/vec2_classes.hpp	/^class Vec2<float>$/;"	kind:c	namespace:liborangepower::containers
liborangepower::containers::Vec2::Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2() : x(Type()), y(Type())$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:()
liborangepower::containers::Vec2::Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2(Vec2<OtherType>&& to_move)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(Vec2<OtherType> && to_move)
liborangepower::containers::Vec2::Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2(const Type1& s_x, const Type2& s_y)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(const Type1 & s_x,const Type2 & s_y)
liborangepower::containers::Vec2::Vec2	liborangepower_src/vec2_classes.hpp	/^	constexpr inline Vec2(const Vec2<OtherType>& to_copy)$/;"	kind:f	class:liborangepower::containers::Vec2	access:public	signature:(const Vec2<OtherType> & to_copy)
liborangepower::containers::Vec2::dot_prod	liborangepower_src/vec2_classes.hpp	/^	inline Type dot_prod(const Vec2<OtherType>& to_dot) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public	signature:(const Vec2<OtherType> & to_dot) const
liborangepower::containers::Vec2::generate_float_pt_vec2_extra_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_float_pt_vec2_extra_class_contents(double);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(double)
liborangepower::containers::Vec2::generate_float_pt_vec2_extra_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_float_pt_vec2_extra_class_contents(float);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(float)
liborangepower::containers::Vec2::generate_specific_vec2_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_specific_vec2_class_contents(double);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(double)
liborangepower::containers::Vec2::generate_specific_vec2_class_contents	liborangepower_src/vec2_classes.hpp	/^	generate_specific_vec2_class_contents(float);$/;"	kind:p	class:liborangepower::containers::Vec2	access:private	signature:(float)
liborangepower::containers::Vec2::operator !=	liborangepower_src/vec2_classes.hpp	/^	inline bool operator != (const Vec2<OtherType>& to_cmp) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:bool	access:public	signature:(const Vec2<OtherType> & to_cmp) const
liborangepower::containers::Vec2::operator *	liborangepower_src/vec2_classes.hpp	/^	inline Vec2 operator * (const OtherType& scale) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2	access:public	signature:(const OtherType & scale) const
liborangepower::containers::Vec2::operator *=	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator *= (const OtherType& scale)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const OtherType & scale)
liborangepower::containers::Vec2::operator +	liborangepower_src/vec2_classes.hpp	/^	inline Vec2 operator + (const Vec2<OtherType>& to_add) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2	access:public	signature:(const Vec2<OtherType> & to_add) const
liborangepower::containers::Vec2::operator +=	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator += (const Vec2<OtherType>& to_add)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const Vec2<OtherType> & to_add)
liborangepower::containers::Vec2::operator -	liborangepower_src/vec2_classes.hpp	/^	inline Vec2 operator - (const Vec2<OtherType>& to_sub) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2	access:public	signature:(const Vec2<OtherType> & to_sub) const
liborangepower::containers::Vec2::operator -=	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator -= (const Vec2<OtherType>& to_sub)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const Vec2<OtherType> & to_sub)
liborangepower::containers::Vec2::operator =	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator = (Vec2<OtherType>&& to_move)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(Vec2<OtherType> && to_move)
liborangepower::containers::Vec2::operator =	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator = (const Vec2<OtherType>& to_copy)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const Vec2<OtherType> & to_copy)
liborangepower::containers::Vec2::operator ==	liborangepower_src/vec2_classes.hpp	/^	inline bool operator == (const Vec2<OtherType>& to_cmp) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:bool	access:public	signature:(const Vec2<OtherType> & to_cmp) const
liborangepower::containers::Vec2::operator [] 	liborangepower_src/vec2_classes.hpp	/^	inline Type& operator [] (size_t index)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Type &	access:public	signature:(size_t index)
liborangepower::containers::Vec2::operator [] 	liborangepower_src/vec2_classes.hpp	/^	inline const Type& operator [] (size_t index) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:const Type &	access:public	signature:(size_t index) const
liborangepower::containers::Vec2::x	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
liborangepower::containers::Vec2::y	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
liborangepower::containers::Vec2::zcross_prod	liborangepower_src/vec2_classes.hpp	/^	inline Type zcross_prod(const Vec2<OtherType>& to_zcross) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public	signature:(const Vec2<OtherType> & to_zcross) const
liborangepower::containers::Vec2S16	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::s16> Vec2S16;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::s16>
liborangepower::containers::Vec2S32	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::s32> Vec2S32;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::s32>
liborangepower::containers::Vec2S64	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::s64> Vec2S64;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::s64>
liborangepower::containers::Vec2U16	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::u16> Vec2U16;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::u16>
liborangepower::containers::Vec2U32	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::u32> Vec2U32;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::u32>
liborangepower::containers::Vec2U64	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<integer_types::u64> Vec2U64;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<integer_types::u64>
liborangepower::containers::Vec2_dbl	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<double> Vec2_dbl;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<double>
liborangepower::containers::Vec2_flt	liborangepower_src/vec2_classes.hpp	/^typedef Vec2<float> Vec2_flt;$/;"	kind:t	namespace:liborangepower::containers	typeref:typename:Vec2<float>
liborangepower::containers::custom_abs	liborangepower_src/vec2_classes.hpp	/^inline Vec2<Type> custom_abs(const Vec2<Type>& val)$/;"	kind:f	namespace:liborangepower::containers	typeref:typename:Vec2<Type>	signature:(const Vec2<Type> & val)
liborangepower::containers::operator *	liborangepower_src/vec2_classes.hpp	/^inline Vec2<Type> operator * (const Type& scale, $/;"	kind:f	namespace:liborangepower::containers	typeref:typename:Vec2<Type>	signature:(const Type & scale,const Vec2<Type> & vec2_to_mul)
liborangepower::containers::vec2_index_for_x	liborangepower_src/vec2_classes.hpp	/^static constexpr size_t vec2_index_for_x = 0, vec2_index_for_y = 1;$/;"	kind:v	namespace:liborangepower::containers	typeref:typename:size_t
liborangepower::containers::vec2_index_for_y	liborangepower_src/vec2_classes.hpp	/^static constexpr size_t vec2_index_for_x = 0, vec2_index_for_y = 1;$/;"	kind:v	namespace:liborangepower::containers	typeref:typename:size_t
liborangepower::integer_types	liborangepower_src/misc_types.hpp	/^namespace integer_types$/;"	kind:n	namespace:liborangepower
liborangepower::integer_types::s16	liborangepower_src/misc_types.hpp	/^typedef uint16_t u16; typedef int16_t s16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int16_t
liborangepower::integer_types::s32	liborangepower_src/misc_types.hpp	/^typedef uint32_t u32; typedef int32_t s32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int32_t
liborangepower::integer_types::s64	liborangepower_src/misc_types.hpp	/^typedef uint64_t u64; typedef int64_t s64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int64_t
liborangepower::integer_types::s8	liborangepower_src/misc_types.hpp	/^typedef uint8_t u8; typedef int8_t s8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int8_t
liborangepower::integer_types::u16	liborangepower_src/misc_types.hpp	/^typedef uint16_t u16; typedef int16_t s16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint16_t
liborangepower::integer_types::u32	liborangepower_src/misc_types.hpp	/^typedef uint32_t u32; typedef int32_t s32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint32_t
liborangepower::integer_types::u64	liborangepower_src/misc_types.hpp	/^typedef uint64_t u64; typedef int64_t s64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint64_t
liborangepower::integer_types::u8	liborangepower_src/misc_types.hpp	/^typedef uint8_t u8; typedef int8_t s8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint8_t
liborangepower::integer_types::uint	liborangepower_src/misc_types.hpp	/^typedef unsigned int uint;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:unsigned int
liborangepower::json	liborangepower_src/json_stuff.cpp	/^namespace json$/;"	kind:n	namespace:liborangepower	file:
liborangepower::json	liborangepower_src/json_stuff.hpp	/^namespace json$/;"	kind:n	namespace:liborangepower
liborangepower::json::debug_print_json	liborangepower_src/json_stuff.cpp	/^void debug_print_json(const Json::Value& some_value, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os,size_t tabs_level)
liborangepower::json::debug_print_json	liborangepower_src/json_stuff.hpp	/^inline void debug_print_json(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout,size_t tabs_level=0)
liborangepower::json::debug_print_json	liborangepower_src/json_stuff.hpp	/^void debug_print_json(const Json::Value& some_value, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout,size_t tabs_level=0)
liborangepower::json::err	liborangepower_src/json_stuff.hpp	/^void err(arg_types&&... args)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(arg_types &&...args)
liborangepower::json::get_json_value_type_as_str	liborangepower_src/json_stuff.cpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
liborangepower::json::get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^inline std::string get_json_value_type_as_str(Json::Value* iter)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:std::string	signature:(Json::Value * iter)
liborangepower::json::get_json_value_type_as_str	liborangepower_src/json_stuff.hpp	/^std::string get_json_value_type_as_str(const Json::Value& some_value);$/;"	kind:p	namespace:liborangepower::json	typeref:typename:std::string	signature:(const Json::Value & some_value)
liborangepower::json::parse_json	liborangepower_src/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(const std::string& input_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(const std::string & input_file_name,Json::Value * root,std::string * errs)
liborangepower::json::parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(std::istream& is, Json::Value* root, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(std::istream & is,Json::Value * root,std::string * errs)
liborangepower::json::print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout)
liborangepower::json::print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(const Json::Value& some_value,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout)
liborangepower::json::write_json	liborangepower_src/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(const std::string& output_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const std::string & output_file_name,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(std::ostream& os, Json::Value* root)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(std::ostream & os,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
liborangepower::json::write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
liborangepower::misc_util	liborangepower_src/memwhatever_wrappers.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
liborangepower::misc_util	liborangepower_src/misc_utility_funcs.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
liborangepower::misc_util::__init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void __init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & first_value,const RemainingTypes &...remaining_values)
liborangepower::misc_util::__init_array_backend	liborangepower_src/misc_utility_funcs.hpp	/^inline void __init_array_backend(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const Type & to_copy)
liborangepower::misc_util::anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstType& first_val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstType & first_val)
liborangepower::misc_util::anything_matches	liborangepower_src/misc_utility_funcs.hpp	/^bool anything_matches(const FirstType& first_val, const SecondType& next, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(const FirstType & first_val,const SecondType & next,RemArgTypes &&...rem_args)
liborangepower::misc_util::arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(Type* dst, const void* src, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,const void * src,size_t num_elems)
liborangepower::misc_util::arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<Type, size>& dst, const void* src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,const void * src)
liborangepower::misc_util::arr_memcpy	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memcpy(std::array<dst_type, size>& dst, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<dst_type,size> & dst,std::array<src_type,size> & src)
liborangepower::misc_util::arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(Type* dst, int c, size_t num_elems)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(Type * dst,int c,size_t num_elems)
liborangepower::misc_util::arr_memset	liborangepower_src/memwhatever_wrappers.hpp	/^inline void* arr_memset(std::array<Type, size>& dst, size_t src)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void *	signature:(std::array<Type,size> & dst,size_t src)
liborangepower::misc_util::cmpeq_array	liborangepower_src/misc_utility_funcs.hpp	/^bool cmpeq_array(FirstType* first_arr, SecondType* second_arr, size_t size)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(FirstType * first_arr,SecondType * second_arr,size_t size)
liborangepower::misc_util::cmpeq_array	liborangepower_src/misc_utility_funcs.hpp	/^bool cmpeq_array(FirstType* first_arr, SecondType* second_arr, size_t size)$/;"	kind:p	namespace:liborangepower::misc_util	typeref:typename:bool	signature:(FirstType * first_arr,SecondType * second_arr,size_t size)
liborangepower::misc_util::custom_abs	liborangepower_src/misc_utility_funcs.hpp	/^inline Type custom_abs(const Type& val)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:Type	signature:(const Type & val)
liborangepower::misc_util::init_array	liborangepower_src/misc_utility_funcs.hpp	/^inline void init_array(Type* all_values_arr, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:void	signature:(Type * all_values_arr,const AllTheTypes &...all_the_values)
liborangepower::misc_util::max_va	liborangepower_src/misc_utility_funcs.hpp	/^FirstType max_va(const FirstType& arg_0, const SecondType& arg_1)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1)
liborangepower::misc_util::max_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstType max_va(const FirstType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1,RemainingTypes...remaining_args)
liborangepower::misc_util::min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstType min_va(const FirstType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1)
liborangepower::misc_util::min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstType min_va(const FirstType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1,RemainingTypes...remaining_args)
liborangepower::misc_util::type_is_signed	liborangepower_src/misc_utility_funcs.hpp	/^constexpr inline bool type_is_signed()$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:()
liborangepower::printout_etc	liborangepower_src/misc_output_classes.hpp	/^namespace printout_etc$/;"	kind:n	namespace:liborangepower
liborangepower::printout_etc::AnyPrintoutBackend	liborangepower_src/misc_output_classes.hpp	/^class AnyPrintoutBackend$/;"	kind:c	namespace:liborangepower::printout_etc
liborangepower::printout_etc::AnyPrintoutBackend::func	liborangepower_src/misc_output_classes.hpp	/^	static inline void func(std::ostream& os)$/;"	kind:f	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:void	access:private	signature:(std::ostream & os)
liborangepower::printout_etc::AnyPrintoutBackend::func	liborangepower_src/misc_output_classes.hpp	/^	static void func(std::ostream& os, const FirstType& first_val, $/;"	kind:f	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:void	access:private	signature:(std::ostream & os,const FirstType & first_val,RemArgTypes &&...rem_args)
liborangepower::printout_etc::AnyPrintoutBackend::osprintout	liborangepower_src/misc_output_classes.hpp	/^	friend std::ostream& osprintout(std::ostream& os, $/;"	kind:p	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:std::ostream &	access:private	signature:(std::ostream & os,ArgTypes &&...args)
liborangepower::printout_etc::fprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& fprintout(std::ostream& out_file, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & out_file,ArgTypes &&...args)
liborangepower::printout_etc::osprint_arr	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprint_arr(std::ostream& os, ArrType* to_print, size_t size)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArrType * to_print,size_t size)
liborangepower::printout_etc::osprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& osprintout(std::ostream& os, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
liborangepower::printout_etc::osprintout	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprintout(std::ostream& os, ArgTypes&&... args);$/;"	kind:p	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
liborangepower::printout_etc::printerr	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printerr(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
liborangepower::printout_etc::printout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printout(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
liborangepower::printout_etc::sconcat	liborangepower_src/misc_output_classes.hpp	/^std::string sconcat(const FirstType& first_val, $/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstType & first_val,RemArgTypes &&...rem_args)
liborangepower::printout_etc::strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom()$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:()
liborangepower::printout_etc::strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const FirstType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstType & first_val,RemArgTypes &&...rem_args)
liborangepower::printout_etc::strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const Type& to_concat)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const Type & to_concat)
liborangepower::printout_etc::strappcom2	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom2(const FirstType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstType & first_val,RemArgTypes &&...rem_args)
liborangepower::range	liborangepower_src/range_funcs.hpp	/^namespace range$/;"	kind:n	namespace:liborangepower
liborangepower::range::clamp_to_range	liborangepower_src/range_funcs.hpp	/^inline Type clamp_to_range(Type range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:Type	signature:(Type range_start_inclusive,Type range_end_exclusive,Type to_clamp)
liborangepower::range::in_range	liborangepower_src/range_funcs.hpp	/^inline bool in_range(Type range_start_inclusive, Type range_end_exclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(Type range_start_inclusive,Type range_end_exclusive,Type to_check)
liborangepower::range::in_range_inclusive	liborangepower_src/range_funcs.hpp	/^inline bool in_range_inclusive(Type range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(Type range_start_inclusive,Type range_end_inclusive,Type to_check)
liborangepower::range::vec2_in_range	liborangepower_src/range_funcs.hpp	/^inline bool vec2_in_range(containers::Vec2<Type> range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(containers::Vec2<Type> range_start_inclusive,containers::Vec2<Type> range_end_exclusive,containers::Vec2<Type> to_check)
liborangepower::strings	liborangepower_src/str_split_helper_classes.hpp	/^namespace strings$/;"	kind:n	namespace:liborangepower
liborangepower::strings::StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^class StrSplitHelperBase$/;"	kind:c	namespace:liborangepower::strings
liborangepower::strings::StrSplitHelperBase::StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(StrSplitHelperBase && to_move)
liborangepower::strings::StrSplitHelperBase::StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(const StrSplitHelperBase & to_copy)
liborangepower::strings::StrSplitHelperBase::StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase()$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:()
liborangepower::strings::StrSplitHelperBase::StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase(StrType&& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(StrType && s_to_split)
liborangepower::strings::StrSplitHelperBase::StrSplitHelperBase	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase(const StrType& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	access:protected	signature:(const StrType & s_to_split)
liborangepower::strings::StrSplitHelperBase::StrType	liborangepower_src/str_split_helper_classes.hpp	/^	typedef SomeStrType StrType;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:SomeStrType	access:public
liborangepower::strings::StrSplitHelperBase::find_pos_after_end_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	virtual size_t find_pos_after_end_of_word(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:(size_t & i)
liborangepower::strings::StrSplitHelperBase::find_start_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	size_t find_start_of_word(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:(size_t & i)
liborangepower::strings::StrSplitHelperBase::get_substr_size	liborangepower_src/str_split_helper_classes.hpp	/^	static inline size_t get_substr_size(const size_t start, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:(const size_t start,const size_t pos_after_end)
liborangepower::strings::StrSplitHelperBase::increment_i	liborangepower_src/str_split_helper_classes.hpp	/^	inline void increment_i(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:void	access:public	signature:(size_t & i)
liborangepower::strings::StrSplitHelperBase::index_in_to_split	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool index_in_to_split(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:public	signature:(size_t i) const
liborangepower::strings::StrSplitHelperBase::init	liborangepower_src/str_split_helper_classes.hpp	/^	inline void init(StrType&& n_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:void	access:public	signature:(StrType && n_to_split)
liborangepower::strings::StrSplitHelperBase::init	liborangepower_src/str_split_helper_classes.hpp	/^	inline void init(const StrType& n_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:void	access:public	signature:(const StrType & n_to_split)
liborangepower::strings::StrSplitHelperBase::internal_line_num	liborangepower_src/str_split_helper_classes.hpp	/^	size_t internal_line_num = 1;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:protected
liborangepower::strings::StrSplitHelperBase::internal_num_consec_backslashes	liborangepower_src/str_split_helper_classes.hpp	/^	size_t internal_num_consec_backslashes = 0;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:protected
liborangepower::strings::StrSplitHelperBase::internal_prev_i	liborangepower_src/str_split_helper_classes.hpp	/^	size_t internal_prev_i;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:protected
liborangepower::strings::StrSplitHelperBase::internal_to_split	liborangepower_src/str_split_helper_classes.hpp	/^	StrType internal_to_split;$/;"	kind:m	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrType	access:protected
liborangepower::strings::StrSplitHelperBase::line_num	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t line_num() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::list_of_special_endpoint_pairs	liborangepower_src/str_split_helper_classes.hpp	/^		list_of_special_endpoint_pairs() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const std::vector<val_typ_pair> &	access:protected	signature:() const
liborangepower::strings::StrSplitHelperBase::make_vt_pair	liborangepower_src/str_split_helper_classes.hpp	/^	static inline  auto make_vt_pair(value_type&& t, value_type&& u)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:auto	access:protected	signature:(value_type && t,value_type && u)
liborangepower::strings::StrSplitHelperBase::make_vt_pair	liborangepower_src/str_split_helper_classes.hpp	/^	static inline auto make_vt_pair(const value_type& t, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:auto	access:protected	signature:(const value_type & t,const value_type & u)
liborangepower::strings::StrSplitHelperBase::num_consec_backslashes	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t num_consec_backslashes() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrSplitHelperBase &	access:protected	signature:(StrSplitHelperBase && to_move)
liborangepower::strings::StrSplitHelperBase::operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrSplitHelperBase &	access:protected	signature:(const StrSplitHelperBase & to_copy)
liborangepower::strings::StrSplitHelperBase::prev_i	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t prev_i() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::prev_prev_i	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t prev_prev_i() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::prev_prev_to_split_at	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type& prev_prev_to_split_at() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type &	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::prev_prev_to_split_at_ptr	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type* prev_prev_to_split_at_ptr() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type *	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::prev_to_split_at	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type& prev_to_split_at() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type &	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::prev_to_split_at_ptr	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type* prev_to_split_at_ptr() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type *	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::to_split	liborangepower_src/str_split_helper_classes.hpp	/^	inline const StrType& to_split() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const StrType &	access:public	signature:() const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_any_special_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_any_special_endpoint(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_end_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	bool to_split_at_is_end_of_word(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:public	signature:(size_t i) const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_indiv_word	liborangepower_src/str_split_helper_classes.hpp	/^	virtual bool to_split_at_is_indiv_word(size_t i) const = 0;$/;"	kind:p	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_first_endpoint(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_first_endpoint(size_t i, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i,val_typ_pair & which) const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_second_endpoint(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
liborangepower::strings::StrSplitHelperBase::to_split_at_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_second_endpoint(size_t i, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i,val_typ_pair & which) const
liborangepower::strings::StrSplitHelperBase::val_typ_pair	liborangepower_src/str_split_helper_classes.hpp	/^	typedef std::pair<value_type, value_type> val_typ_pair;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:std::pair<value_type,value_type>	access:public
liborangepower::strings::StrSplitHelperBase::value_type	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename StrType::value_type value_type;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrType::value_type	access:public
liborangepower::strings::StrSplitHelperBase::vt_is_any_special_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	bool vt_is_any_special_endpoint(const value_type& vt) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt) const
liborangepower::strings::StrSplitHelperBase::vt_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	bool vt_is_special_first_endpoint(const value_type& vt,$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt,val_typ_pair & which) const
liborangepower::strings::StrSplitHelperBase::vt_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool vt_is_special_first_endpoint(const value_type& vt) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt) const
liborangepower::strings::StrSplitHelperBase::vt_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	bool vt_is_special_second_endpoint(const value_type& vt,$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt,val_typ_pair & which) const
liborangepower::strings::StrSplitHelperBase::vt_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool vt_is_special_second_endpoint(const value_type& vt) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt) const
liborangepower::strings::StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^class StrSplitHelperNoEscapes : public StrSplitHelperBase<StrType>$/;"	kind:c	namespace:liborangepower::strings	inherits:StrSplitHelperBase<StrType>
liborangepower::strings::StrSplitHelperNoEscapes::Base	liborangepower_src/str_split_helper_classes.hpp	/^	typedef StrSplitHelperBase<StrType> Base;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:StrSplitHelperBase<StrType>	access:public
liborangepower::strings::StrSplitHelperNoEscapes::StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(StrSplitHelperNoEscapes && to_move)
liborangepower::strings::StrSplitHelperNoEscapes::StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(const StrSplitHelperNoEscapes & to_copy)
liborangepower::strings::StrSplitHelperNoEscapes::StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes()$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:()
liborangepower::strings::StrSplitHelperNoEscapes::StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes(StrType&& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(StrType && s_to_split)
liborangepower::strings::StrSplitHelperNoEscapes::StrSplitHelperNoEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes(const StrType& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	access:public	signature:(const StrType & s_to_split)
liborangepower::strings::StrSplitHelperNoEscapes::operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:StrSplitHelperNoEscapes &	access:public	signature:(StrSplitHelperNoEscapes && to_move)
liborangepower::strings::StrSplitHelperNoEscapes::operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:StrSplitHelperNoEscapes &	access:public	signature:(const StrSplitHelperNoEscapes & to_copy)
liborangepower::strings::StrSplitHelperNoEscapes::value_type	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename Base::value_type value_type;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:Base::value_type	access:public
liborangepower::strings::StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^class StrSplitHelperWithEscapes : public StrSplitHelperBase<StrType>$/;"	kind:c	namespace:liborangepower::strings	inherits:StrSplitHelperBase<StrType>
liborangepower::strings::StrSplitHelperWithEscapes::Base	liborangepower_src/str_split_helper_classes.hpp	/^	typedef StrSplitHelperBase<StrType> Base;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:StrSplitHelperBase<StrType>	access:public
liborangepower::strings::StrSplitHelperWithEscapes::StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(StrSplitHelperWithEscapes && to_move)
liborangepower::strings::StrSplitHelperWithEscapes::StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(const StrSplitHelperWithEscapes & to_copy)
liborangepower::strings::StrSplitHelperWithEscapes::StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes()$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:()
liborangepower::strings::StrSplitHelperWithEscapes::StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes(StrType&& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(StrType && s_to_split)
liborangepower::strings::StrSplitHelperWithEscapes::StrSplitHelperWithEscapes	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes(const StrType& s_to_split)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	access:public	signature:(const StrType & s_to_split)
liborangepower::strings::StrSplitHelperWithEscapes::find_pos_after_end_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	virtual size_t find_pos_after_end_of_word(size_t& i)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:size_t	access:public	signature:(size_t & i)
liborangepower::strings::StrSplitHelperWithEscapes::operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:StrSplitHelperWithEscapes &	access:public	signature:(StrSplitHelperWithEscapes && to_move)
liborangepower::strings::StrSplitHelperWithEscapes::operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:StrSplitHelperWithEscapes &	access:public	signature:(const StrSplitHelperWithEscapes & to_copy)
liborangepower::strings::StrSplitHelperWithEscapes::val_typ_pair	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename Base::val_typ_pair val_typ_pair;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:Base::val_typ_pair	access:public
liborangepower::strings::StrSplitHelperWithEscapes::value_type	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename Base::value_type value_type;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:Base::value_type	access:public
liborangepower::time	liborangepower_src/time_stuff.hpp	/^namespace time$/;"	kind:n	namespace:liborangepower
liborangepower::time::Prng	liborangepower_src/time_stuff.hpp	/^class Prng$/;"	kind:c	namespace:liborangepower::time
liborangepower::time::Prng::InstanceType	liborangepower_src/time_stuff.hpp	/^	typedef std::mt19937_64 InstanceType;$/;"	kind:t	class:liborangepower::time::Prng	typeref:typename:std::mt19937_64	access:public
liborangepower::time::Prng::Prng	liborangepower_src/time_stuff.hpp	/^	inline Prng(int s_param_0=0, int s_param_1=0) $/;"	kind:f	class:liborangepower::time::Prng	access:public	signature:(int s_param_0=0,int s_param_1=0)
liborangepower::time::Prng::SeedType	liborangepower_src/time_stuff.hpp	/^		.time_since_epoch().count()) SeedType;$/;"	kind:t	class:liborangepower::time::Prng	access:public
liborangepower::time::Prng::__instance	liborangepower_src/time_stuff.hpp	/^	InstanceType __instance;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:InstanceType	access:protected
liborangepower::time::Prng::__param_0	liborangepower_src/time_stuff.hpp	/^	int __param_0, __param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
liborangepower::time::Prng::__param_1	liborangepower_src/time_stuff.hpp	/^	int __param_0, __param_1;$/;"	kind:m	class:liborangepower::time::Prng	typeref:typename:int	access:protected
liborangepower::time::Prng::gen_getter_by_con_ref	liborangepower_src/time_stuff.hpp	/^	gen_getter_by_con_ref(instance);$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:(instance)
liborangepower::time::Prng::gen_getter_by_val	liborangepower_src/time_stuff.hpp	/^	gen_getter_by_val(param_0);$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:(param_0)
liborangepower::time::Prng::gen_getter_by_val	liborangepower_src/time_stuff.hpp	/^	gen_getter_by_val(param_1);$/;"	kind:p	class:liborangepower::time::Prng	access:public	signature:(param_1)
liborangepower::time::Prng::get_initial_seed	liborangepower_src/time_stuff.hpp	/^	inline SeedType get_initial_seed()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:SeedType	access:protected	signature:()
liborangepower::time::Prng::operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () ()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:()
liborangepower::time::Prng::operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () (integer_types::u64 max_val, $/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:(integer_types::u64 max_val,const bool use_cap=false)
liborangepower::time::Profiler	liborangepower_src/time_stuff.hpp	/^class Profiler$/;"	kind:c	namespace:liborangepower::time
liborangepower::time::Profiler::end_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
liborangepower::time::Profiler::get_hrc_now	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
liborangepower::time::Profiler::get_hrc_now_time_t	liborangepower_src/time_stuff.hpp	/^	static inline auto get_hrc_now_time_t()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
liborangepower::time::Profiler::start	liborangepower_src/time_stuff.hpp	/^	inline void start()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:void	access:public	signature:()
liborangepower::time::Profiler::start_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
liborangepower::time::Profiler::stop	liborangepower_src/time_stuff.hpp	/^	inline auto stop()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
liborangepower::time::now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
liborangepower::time::now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
liborangepower::time::now_as_time_t	liborangepower_src/time_stuff.hpp	/^inline std::time_t now_as_time_t()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::time_t	signature:()
liborangepower::time::put_now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
liborangepower::time::put_now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
liborangepower_array_2d_helper_classes_hpp	liborangepower_src/array_2d_helper_classes.hpp	/^#define liborangepower_array_2d_helper_classes_hpp$/;"	kind:d
liborangepower_array_helper_classes_hpp	liborangepower_src/array_helper_classes.hpp	/^#define liborangepower_array_helper_classes_hpp$/;"	kind:d
liborangepower_gen_getter_setter_defines_hpp	liborangepower_src/gen_getter_setter_defines.hpp	/^#define liborangepower_gen_getter_setter_defines_hpp$/;"	kind:d
liborangepower_json_stuff_hpp	liborangepower_src/json_stuff.hpp	/^#define liborangepower_json_stuff_hpp$/;"	kind:d
liborangepower_lexer_classes_hpp	liborangepower_src/quoted_str_converter_stuff.hpp	/^#define liborangepower_lexer_classes_hpp$/;"	kind:d
liborangepower_memwhatever_wrappers_hpp	liborangepower_src/memwhatever_wrappers.hpp	/^#define liborangepower_memwhatever_wrappers_hpp$/;"	kind:d
liborangepower_misc_bitwise_funcs_hpp	liborangepower_src/misc_bitwise_funcs.hpp	/^#define liborangepower_misc_bitwise_funcs_hpp$/;"	kind:d
liborangepower_misc_defines_hpp	liborangepower_src/misc_defines.hpp	/^#define liborangepower_misc_defines_hpp$/;"	kind:d
liborangepower_misc_includes_hpp	liborangepower_src/misc_includes.hpp	/^#define liborangepower_misc_includes_hpp$/;"	kind:d
liborangepower_misc_output_classes_hpp	liborangepower_src/misc_output_classes.hpp	/^#define liborangepower_misc_output_classes_hpp$/;"	kind:d
liborangepower_misc_types_hpp	liborangepower_src/misc_types.hpp	/^#define liborangepower_misc_types_hpp$/;"	kind:d
liborangepower_misc_utility_funcs_hpp	liborangepower_src/misc_utility_funcs.hpp	/^#define liborangepower_misc_utility_funcs_hpp$/;"	kind:d
liborangepower_prev_curr_pair_class_hpp	liborangepower_src/prev_curr_pair_class.hpp	/^#define liborangepower_prev_curr_pair_class_hpp$/;"	kind:d
liborangepower_range_funcs_hpp	liborangepower_src/range_funcs.hpp	/^#define liborangepower_range_funcs_hpp$/;"	kind:d
liborangepower_str_split_helper_classes_hpp	liborangepower_src/str_split_helper_classes.hpp	/^#define liborangepower_str_split_helper_classes_hpp$/;"	kind:d
liborangepower_time_stuff_hpp	liborangepower_src/time_stuff.hpp	/^#define liborangepower_time_stuff_hpp$/;"	kind:d
liborangepower_vec2_classes_hpp	liborangepower_src/vec2_classes.hpp	/^#define liborangepower_vec2_classes_hpp$/;"	kind:d
line_num	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t line_num() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
list	ast_node_classes.hpp	/^	std::vector<AstNode*>& list = children;$/;"	kind:m	class:AstNode	typeref:typename:std::vector<AstNode * > &	access:public
list_of_special_endpoint_pairs	liborangepower_src/str_split_helper_classes.hpp	/^		list_of_special_endpoint_pairs() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const std::vector<val_typ_pair> &	access:protected	signature:() const
list_statement	specific_ast_node_classes.hpp	/^	inline auto list_statement() { return at(1); }$/;"	kind:f	struct:AstStatements	typeref:typename:auto	access:public	signature:()
main	main.cpp	/^int main(int argc, char** argv)$/;"	kind:f	typeref:typename:int	signature:(int argc,char ** argv)
make_initial_binop_node	abstract_syntax_tree_class.hpp	/^	inline AstNode* make_initial_binop_node()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:public	signature:()
make_vt_pair	liborangepower_src/str_split_helper_classes.hpp	/^	static inline  auto make_vt_pair(value_type&& t, value_type&& u)$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:auto	access:protected	signature:(value_type && t,value_type && u)
make_vt_pair	liborangepower_src/str_split_helper_classes.hpp	/^	static inline auto make_vt_pair(const value_type& t, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:auto	access:protected	signature:(const value_type & t,const value_type & u)
max_va	liborangepower_src/misc_utility_funcs.hpp	/^FirstType max_va(const FirstType& arg_0, const SecondType& arg_1)$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1)
max_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstType max_va(const FirstType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1,RemainingTypes...remaining_args)
min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstType min_va(const FirstType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1)
min_va	liborangepower_src/misc_utility_funcs.hpp	/^inline FirstType min_va(const FirstType& arg_0, $/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:FirstType	signature:(const FirstType & arg_0,const SecondType & arg_1,RemainingTypes...remaining_args)
misc_bison_stuff_hpp	misc_bison_stuff.hpp	/^#define misc_bison_stuff_hpp$/;"	kind:d
misc_includes_hpp	misc_includes.hpp	/^#define misc_includes_hpp$/;"	kind:d
misc_int_types_h	misc_int_types.h	/^#define misc_int_types_h$/;"	kind:d
misc_util	liborangepower_src/memwhatever_wrappers.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
misc_util	liborangepower_src/misc_utility_funcs.hpp	/^namespace misc_util$/;"	kind:n	namespace:liborangepower
mknode	abstract_syntax_tree_class.hpp	/^	inline AstNode* mknode()$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:AstNode *	access:protected	signature:()
mkscope	scoped_ident_table_class.hpp	/^	void mkscope() __attribute__((noinline))$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:()
mkscope	specific_ast_node_classes.hpp	/^	inline auto mkscope() { return at(0); }$/;"	kind:f	struct:AstStatements	typeref:typename:auto	access:public	signature:()
name_is_builtin	scoped_ident_table_class.hpp	/^	bool name_is_builtin(const std::string& some_name) const$/;"	kind:f	class:ScopedIdentTable	typeref:typename:bool	access:public	signature:(const std::string & some_name) const
not_found_level	scoped_ident_table_class.hpp	/^	static constexpr s64 not_found_level = builtin_scope_level - 1;$/;"	kind:m	class:ScopedIdentTable	typeref:typename:s64	access:public
now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline std::tm* now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::tm *	signature:()
now_as_time_t	liborangepower_src/time_stuff.hpp	/^inline std::time_t now_as_time_t()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:std::time_t	signature:()
num	ast_node_classes.hpp	/^	int num;$/;"	kind:m	class:AstNode	typeref:typename:int	access:public
num_consec_backslashes	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t num_consec_backslashes() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
operator !=	liborangepower_src/vec2_classes.hpp	/^	inline bool operator != (const Vec2<OtherType>& to_cmp) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:bool	access:public	signature:(const Vec2<OtherType> & to_cmp) const
operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () ()$/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:()
operator () 	liborangepower_src/time_stuff.hpp	/^	inline auto operator () (integer_types::u64 max_val, $/;"	kind:f	class:liborangepower::time::Prng	typeref:typename:auto	access:public	signature:(integer_types::u64 max_val,const bool use_cap=false)
operator *	liborangepower_src/vec2_classes.hpp	/^	inline Vec2 operator * (const OtherType& scale) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2	access:public	signature:(const OtherType & scale) const
operator *	liborangepower_src/vec2_classes.hpp	/^inline Vec2<Type> operator * (const Type& scale, $/;"	kind:f	namespace:liborangepower::containers	typeref:typename:Vec2<Type>	signature:(const Type & scale,const Vec2<Type> & vec2_to_mul)
operator *=	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator *= (const OtherType& scale)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const OtherType & scale)
operator +	liborangepower_src/vec2_classes.hpp	/^	inline Vec2 operator + (const Vec2<OtherType>& to_add) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2	access:public	signature:(const Vec2<OtherType> & to_add) const
operator +=	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator += (const Vec2<OtherType>& to_add)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const Vec2<OtherType> & to_add)
operator -	liborangepower_src/vec2_classes.hpp	/^	inline Vec2 operator - (const Vec2<OtherType>& to_sub) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2	access:public	signature:(const Vec2<OtherType> & to_sub) const
operator -=	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator -= (const Vec2<OtherType>& to_sub)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const Vec2<OtherType> & to_sub)
operator <<	ast_node_classes.cpp	/^std::ostream& operator << (std::ostream& os, AstNode* to_print)$/;"	kind:f	typeref:typename:std::ostream &	signature:(std::ostream & os,AstNode * to_print)
operator <<	ast_node_classes.hpp	/^std::ostream& operator << (std::ostream& os, AstNode* to_print);$/;"	kind:p	typeref:typename:std::ostream &	signature:(std::ostream & os,AstNode * to_print)
operator =	ast_node_classes.hpp	/^	AstNode& operator = (AstNode&& to_move) = default;$/;"	kind:p	class:AstNode	typeref:typename:AstNode &	access:public	signature:(AstNode && to_move)
operator =	ast_node_classes.hpp	/^	AstNode& operator = (const AstNode& to_copy) = default;$/;"	kind:p	class:AstNode	typeref:typename:AstNode &	access:public	signature:(const AstNode & to_copy)
operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	Array2dHelper& operator = (const Array2dHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::Array2dHelper	typeref:typename:Array2dHelper &	access:public	signature:(const Array2dHelper & to_copy)
operator =	liborangepower_src/array_2d_helper_classes.hpp	/^	ArrayCsz2dHelper& operator = (const ArrayCsz2dHelper& to_copy) $/;"	kind:p	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:ArrayCsz2dHelper &	access:public	signature:(const ArrayCsz2dHelper & to_copy)
operator =	liborangepower_src/array_helper_classes.hpp	/^	ArrayCszHelper& operator = (const ArrayCszHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayCszHelper	typeref:typename:ArrayCszHelper &	access:public	signature:(const ArrayCszHelper & to_copy)
operator =	liborangepower_src/array_helper_classes.hpp	/^	inline ArrayHelper& operator = (const ArrayHelper& to_copy) = default;$/;"	kind:p	class:liborangepower::containers::ArrayHelper	typeref:typename:ArrayHelper &	access:public	signature:(const ArrayHelper & to_copy)
operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrSplitHelperBase &	access:protected	signature:(StrSplitHelperBase && to_move)
operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperBase& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrSplitHelperBase &	access:protected	signature:(const StrSplitHelperBase & to_copy)
operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:StrSplitHelperNoEscapes &	access:public	signature:(StrSplitHelperNoEscapes && to_move)
operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperNoEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:StrSplitHelperNoEscapes &	access:public	signature:(const StrSplitHelperNoEscapes & to_copy)
operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:StrSplitHelperWithEscapes &	access:public	signature:(StrSplitHelperWithEscapes && to_move)
operator =	liborangepower_src/str_split_helper_classes.hpp	/^	inline StrSplitHelperWithEscapes& operator = $/;"	kind:f	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:StrSplitHelperWithEscapes &	access:public	signature:(const StrSplitHelperWithEscapes & to_copy)
operator =	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator = (Vec2<OtherType>&& to_move)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(Vec2<OtherType> && to_move)
operator =	liborangepower_src/vec2_classes.hpp	/^	inline Vec2& operator = (const Vec2<OtherType>& to_copy)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Vec2 &	access:public	signature:(const Vec2<OtherType> & to_copy)
operator =	symbol_table_class.hpp	/^	inline Symbol& operator = (Symbol&& to_move) = default;$/;"	kind:p	class:Symbol	typeref:typename:Symbol &	access:public	signature:(Symbol && to_move)
operator =	symbol_table_class.hpp	/^	inline Symbol& operator = (const Symbol& to_copy) = default;$/;"	kind:p	class:Symbol	typeref:typename:Symbol &	access:public	signature:(const Symbol & to_copy)
operator ==	liborangepower_src/vec2_classes.hpp	/^	inline bool operator == (const Vec2<OtherType>& to_cmp) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:bool	access:public	signature:(const Vec2<OtherType> & to_cmp) const
operator [] 	liborangepower_src/vec2_classes.hpp	/^	inline Type& operator [] (size_t index)$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Type &	access:public	signature:(size_t index)
operator [] 	liborangepower_src/vec2_classes.hpp	/^	inline const Type& operator [] (size_t index) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:const Type &	access:public	signature:(size_t index) const
osprint	ast_node_classes.hpp	/^	inline std::ostream& osprint(std::ostream& os) const$/;"	kind:f	class:AstNode	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
osprint_arr	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprint_arr(std::ostream& os, ArrType* to_print, size_t size)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArrType * to_print,size_t size)
osprintout	liborangepower_src/misc_output_classes.hpp	/^	friend std::ostream& osprintout(std::ostream& os, $/;"	kind:p	class:liborangepower::printout_etc::AnyPrintoutBackend	typeref:typename:std::ostream &	access:private	signature:(std::ostream & os,ArgTypes &&...args)
osprintout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& osprintout(std::ostream& os, ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
osprintout	liborangepower_src/misc_output_classes.hpp	/^std::ostream& osprintout(std::ostream& os, ArgTypes&&... args);$/;"	kind:p	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(std::ostream & os,ArgTypes &&...args)
output_to_json	ast_node_classes.cpp	/^void AstNode::output_to_json(Json::Value& json_node) const$/;"	kind:f	class:AstNode	typeref:typename:void	signature:(Json::Value & json_node) const
output_to_json	ast_node_classes.hpp	/^	void output_to_json(Json::Value& json_node) const;$/;"	kind:p	class:AstNode	typeref:typename:void	access:public	signature:(Json::Value & json_node) const
parse_json	liborangepower_src/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.cpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, $/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,const std::string & input_file_name,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^bool parse_json(Json::CharReaderBuilder* rbuilder, std::istream& is,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:bool	signature:(Json::CharReaderBuilder * rbuilder,std::istream & is,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(const std::string& input_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(const std::string & input_file_name,Json::Value * root,std::string * errs)
parse_json	liborangepower_src/json_stuff.hpp	/^inline bool parse_json(std::istream& is, Json::Value* root, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:bool	signature:(std::istream & is,Json::Value * root,std::string * errs)
pool_for_cstm_intdup	allocation_stuff.cpp	/^std::vector<int*> pool_for_cstm_intdup;$/;"	kind:v	typeref:typename:std::vector<int * >
pool_for_cstm_strdup	allocation_stuff.cpp	/^std::vector<char*> pool_for_cstm_strdup;$/;"	kind:v	typeref:typename:std::vector<char * >
pop_num	interpreter_class.hpp	/^	inline auto pop_num()$/;"	kind:f	class:Interpreter	typeref:typename:auto	access:protected	signature:()
pop_str	interpreter_class.hpp	/^	inline auto pop_str()$/;"	kind:f	class:Interpreter	typeref:typename:auto	access:protected	signature:()
prev	liborangepower_src/prev_curr_pair_class.hpp	/^	type prev, curr;$/;"	kind:m	class:liborangepower::containers::PrevCurrPair	typeref:typename:type	access:public
prev_i	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t prev_i() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
prev_prev_i	liborangepower_src/str_split_helper_classes.hpp	/^	inline size_t prev_prev_i() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:size_t	access:public	signature:() const
prev_prev_to_split_at	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type& prev_prev_to_split_at() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type &	access:public	signature:() const
prev_prev_to_split_at_ptr	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type* prev_prev_to_split_at_ptr() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type *	access:public	signature:() const
prev_to_split_at	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type& prev_to_split_at() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type &	access:public	signature:() const
prev_to_split_at_ptr	liborangepower_src/str_split_helper_classes.hpp	/^	inline const value_type* prev_to_split_at_ptr() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const value_type *	access:public	signature:() const
print	abstract_syntax_tree_class.hpp	/^	inline void print() const$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:void	access:public	signature:() const
print_json	abstract_syntax_tree_class.hpp	/^	void print_json() const;$/;"	kind:p	class:AbstractSyntaxTree	typeref:typename:void	access:public	signature:() const
print_json	abstract_syntax_tree_class_print_funcs.cpp	/^void AbstractSyntaxTree::print_json() const$/;"	kind:f	class:AbstractSyntaxTree	typeref:typename:void	signature:() const
print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(Json::Value* iter, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::Value * iter,std::ostream & os=std::cout)
print_json_value_type	liborangepower_src/json_stuff.hpp	/^inline void print_json_value_type(const Json::Value& some_value,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const Json::Value & some_value,std::ostream & os=std::cout)
printerr	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printerr(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
printout	liborangepower_src/misc_output_classes.hpp	/^inline std::ostream& printout(ArgTypes&&... args)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::ostream &	signature:(ArgTypes &&...args)
printout_etc	liborangepower_src/misc_output_classes.hpp	/^namespace printout_etc$/;"	kind:n	namespace:liborangepower
push_num	interpreter_class.hpp	/^	inline void push_num(int to_push)$/;"	kind:f	class:Interpreter	typeref:typename:void	access:protected	signature:(int to_push)
push_str	interpreter_class.hpp	/^	inline void push_str(std::string* to_push)$/;"	kind:f	class:Interpreter	typeref:typename:void	access:protected	signature:(std::string * to_push)
put_now_as_gmtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_gmtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
put_now_as_localtime	liborangepower_src/time_stuff.hpp	/^inline auto put_now_as_localtime()$/;"	kind:f	namespace:liborangepower::time	typeref:typename:auto	signature:()
range	liborangepower_src/range_funcs.hpp	/^namespace range$/;"	kind:n	namespace:liborangepower
rhs_node	specific_ast_node_classes.hpp	/^	inline auto rhs_node() { return at(2); }$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:auto	access:public	signature:()
rmscope	scoped_ident_table_class.hpp	/^	void rmscope() __attribute__((noinline))$/;"	kind:f	class:ScopedIdentTable	typeref:typename:void	access:public	signature:()
rmscope	specific_ast_node_classes.hpp	/^	inline auto rmscope() { return at(2); }$/;"	kind:f	struct:AstStatements	typeref:typename:auto	access:public	signature:()
s16	liborangepower_src/misc_types.hpp	/^typedef uint16_t u16; typedef int16_t s16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int16_t
s16	misc_int_types.h	/^typedef uint16_t u16; typedef int16_t s16;$/;"	kind:t	typeref:typename:int16_t
s32	liborangepower_src/misc_types.hpp	/^typedef uint32_t u32; typedef int32_t s32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int32_t
s32	misc_int_types.h	/^typedef uint32_t u32; typedef int32_t s32;$/;"	kind:t	typeref:typename:int32_t
s64	liborangepower_src/misc_types.hpp	/^typedef uint64_t u64; typedef int64_t s64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int64_t
s64	misc_int_types.h	/^typedef uint64_t u64; typedef int64_t s64;$/;"	kind:t	typeref:typename:int64_t
s8	liborangepower_src/misc_types.hpp	/^typedef uint8_t u8; typedef int8_t s8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:int8_t
s8	misc_int_types.h	/^typedef uint8_t u8; typedef int8_t s8;$/;"	kind:t	typeref:typename:int8_t
sconcat	liborangepower_src/misc_output_classes.hpp	/^std::string sconcat(const FirstType& first_val, $/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstType & first_val,RemArgTypes &&...rem_args)
scope_lev	scoped_ident_table_class.hpp	/^	inline s64 scope_lev() const$/;"	kind:f	class:ScopedIdentTable	typeref:typename:s64	access:public	signature:() const
scoped_ident_table_class_hpp	scoped_ident_table_class.hpp	/^#define scoped_ident_table_class_hpp$/;"	kind:d
set_bits	liborangepower_src/misc_bitwise_funcs.hpp	/^inline void set_bits(Type& to_set, size_t mask)$/;"	kind:f	namespace:liborangepower::bitwise	typeref:typename:void	signature:(Type & to_set,size_t mask)
size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
size	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayCszHelper	typeref:typename:size_t	access:public	signature:() const
size	liborangepower_src/array_helper_classes.hpp	/^	size_t size() const$/;"	kind:f	class:liborangepower::containers::ArrayHelper	typeref:typename:size_t	access:public	signature:() const
size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
size_2d	liborangepower_src/array_2d_helper_classes.hpp	/^	const Vec2<size_t>& size_2d() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:const Vec2<size_t> &	access:public	signature:() const
specific_ast_node_classes_hpp	specific_ast_node_classes.hpp	/^#define specific_ast_node_classes_hpp$/;"	kind:d
start	liborangepower_src/time_stuff.hpp	/^	inline void start()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:void	access:public	signature:()
start_tp	liborangepower_src/time_stuff.hpp	/^	std::chrono::high_resolution_clock::time_point start_tp, end_tp;$/;"	kind:m	class:liborangepower::time::Profiler	typeref:typename:std::chrono::high_resolution_clock::time_point	access:protected
statement	specific_ast_node_classes.hpp	/^	inline auto statement() { return at(0); }$/;"	kind:f	struct:AstDoWhile	typeref:typename:auto	access:public	signature:()
statement	specific_ast_node_classes.hpp	/^	inline auto statement() { return at(1); }$/;"	kind:f	struct:AstIf	typeref:typename:auto	access:public	signature:()
statement	specific_ast_node_classes.hpp	/^	inline auto statement() { return at(1); }$/;"	kind:f	struct:AstWhile	typeref:typename:auto	access:public	signature:()
statement_else	specific_ast_node_classes.hpp	/^	inline auto statement_else() { return at(2); }$/;"	kind:f	struct:AstIfChain	typeref:typename:auto	access:public	signature:()
statement_if	specific_ast_node_classes.hpp	/^	inline auto statement_if() { return at(1); }$/;"	kind:f	struct:AstIfChain	typeref:typename:auto	access:public	signature:()
statements	specific_ast_node_classes.hpp	/^	inline auto statements() { return at(0); }$/;"	kind:f	struct:AstProgram	typeref:typename:auto	access:public	signature:()
stop	liborangepower_src/time_stuff.hpp	/^	inline auto stop()$/;"	kind:f	class:liborangepower::time::Profiler	typeref:typename:auto	access:public	signature:()
strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom()$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:()
strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const FirstType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstType & first_val,RemArgTypes &&...rem_args)
strappcom	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom(const Type& to_concat)$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const Type & to_concat)
strappcom2	liborangepower_src/misc_output_classes.hpp	/^inline std::string strappcom2(const FirstType& first_val,$/;"	kind:f	namespace:liborangepower::printout_etc	typeref:typename:std::string	signature:(const FirstType & first_val,RemArgTypes &&...rem_args)
strings	liborangepower_src/str_split_helper_classes.hpp	/^namespace strings$/;"	kind:n	namespace:liborangepower
sym_tbl	symbol_table_class.cpp	/^SymbolTable sym_tbl;$/;"	kind:v	typeref:typename:SymbolTable
symbol_table_class_hpp	symbol_table_class.hpp	/^#define symbol_table_class_hpp$/;"	kind:d
text	ast_node_classes.hpp	/^	std::vector<std::string> text;$/;"	kind:m	class:AstNode	typeref:typename:std::vector<std::string>	access:public
time	liborangepower_src/time_stuff.hpp	/^namespace time$/;"	kind:n	namespace:liborangepower
to_split	liborangepower_src/str_split_helper_classes.hpp	/^	inline const StrType& to_split() const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:const StrType &	access:public	signature:() const
to_split_at_is_any_special_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_any_special_endpoint(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
to_split_at_is_end_of_word	liborangepower_src/str_split_helper_classes.hpp	/^	bool to_split_at_is_end_of_word(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:public	signature:(size_t i) const
to_split_at_is_indiv_word	liborangepower_src/str_split_helper_classes.hpp	/^	virtual bool to_split_at_is_indiv_word(size_t i) const = 0;$/;"	kind:p	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
to_split_at_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_first_endpoint(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
to_split_at_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_first_endpoint(size_t i, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i,val_typ_pair & which) const
to_split_at_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_second_endpoint(size_t i) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i) const
to_split_at_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool to_split_at_is_special_second_endpoint(size_t i, $/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(size_t i,val_typ_pair & which) const
to_string	ast_node_classes.hpp	/^	virtual std::string to_string() const$/;"	kind:f	class:AstNode	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstAssign	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstBinop	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstBuiltinTypename	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstConstant	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstDoWhile	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIdent	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIf	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIfChain	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIndexedAssign	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstIndexedLoad	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstListIdent	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstListStatement	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstLoad	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstMkScope	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstMultiVarDecl	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstProgram	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstRmScope	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstStatements	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstVarDeclArray	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstVarDeclSimple	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstVarDeclWithInit	typeref:typename:std::string	access:public	signature:() const
to_string	specific_ast_node_classes.hpp	/^	std::string to_string() const$/;"	kind:f	struct:AstWhile	typeref:typename:std::string	access:public	signature:() const
type_is_signed	liborangepower_src/misc_utility_funcs.hpp	/^constexpr inline bool type_is_signed()$/;"	kind:f	namespace:liborangepower::misc_util	typeref:typename:bool	signature:()
u16	liborangepower_src/misc_types.hpp	/^typedef uint16_t u16; typedef int16_t s16;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint16_t
u16	misc_int_types.h	/^typedef uint16_t u16; typedef int16_t s16;$/;"	kind:t	typeref:typename:uint16_t
u32	liborangepower_src/misc_types.hpp	/^typedef uint32_t u32; typedef int32_t s32;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint32_t
u32	misc_int_types.h	/^typedef uint32_t u32; typedef int32_t s32;$/;"	kind:t	typeref:typename:uint32_t
u64	liborangepower_src/misc_types.hpp	/^typedef uint64_t u64; typedef int64_t s64;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint64_t
u64	misc_int_types.h	/^typedef uint64_t u64; typedef int64_t s64;$/;"	kind:t	typeref:typename:uint64_t
u8	liborangepower_src/misc_types.hpp	/^typedef uint8_t u8; typedef int8_t s8;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:uint8_t
u8	misc_int_types.h	/^typedef uint8_t u8; typedef int8_t s8;$/;"	kind:t	typeref:typename:uint8_t
uint	liborangepower_src/misc_types.hpp	/^typedef unsigned int uint;$/;"	kind:t	namespace:liborangepower::integer_types	typeref:typename:unsigned int
val_typ_pair	liborangepower_src/str_split_helper_classes.hpp	/^	typedef std::pair<value_type, value_type> val_typ_pair;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:std::pair<value_type,value_type>	access:public
val_typ_pair	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename Base::val_typ_pair val_typ_pair;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:Base::val_typ_pair	access:public
value_type	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename Base::value_type value_type;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperNoEscapes	typeref:typename:Base::value_type	access:public
value_type	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename Base::value_type value_type;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperWithEscapes	typeref:typename:Base::value_type	access:public
value_type	liborangepower_src/str_split_helper_classes.hpp	/^	typedef typename StrType::value_type value_type;$/;"	kind:t	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:StrType::value_type	access:public
vec2_in_range	liborangepower_src/range_funcs.hpp	/^inline bool vec2_in_range(containers::Vec2<Type> range_start_inclusive, $/;"	kind:f	namespace:liborangepower::range	typeref:typename:bool	signature:(containers::Vec2<Type> range_start_inclusive,containers::Vec2<Type> range_end_exclusive,containers::Vec2<Type> to_check)
vec2_index_for_x	liborangepower_src/vec2_classes.hpp	/^static constexpr size_t vec2_index_for_x = 0, vec2_index_for_y = 1;$/;"	kind:v	namespace:liborangepower::containers	typeref:typename:size_t
vec2_index_for_y	liborangepower_src/vec2_classes.hpp	/^static constexpr size_t vec2_index_for_x = 0, vec2_index_for_y = 1;$/;"	kind:v	namespace:liborangepower::containers	typeref:typename:size_t
visit_assign	interpreter_class.cpp	/^void Interpreter::visit_assign(AstAssign* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstAssign * p)
visit_assign	interpreter_class.hpp	/^	void visit_assign(AstAssign* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstAssign * p)
visit_assign	visitor_class.hpp	/^	virtual void visit_assign(AstAssign* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstAssign * p)
visit_binop	interpreter_class.cpp	/^void Interpreter::visit_binop(AstBinop* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstBinop * p)
visit_binop	interpreter_class.hpp	/^	void visit_binop(AstBinop* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstBinop * p)
visit_binop	visitor_class.hpp	/^	virtual void visit_binop(AstBinop* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstBinop * p)
visit_builtin_typename	interpreter_class.cpp	/^void Interpreter::visit_builtin_typename(AstBuiltinTypename* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstBuiltinTypename * p)
visit_builtin_typename	interpreter_class.hpp	/^	void visit_builtin_typename(AstBuiltinTypename* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstBuiltinTypename * p)
visit_builtin_typename	visitor_class.hpp	/^	virtual void visit_builtin_typename(AstBuiltinTypename* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstBuiltinTypename * p)
visit_constant	interpreter_class.cpp	/^void Interpreter::visit_constant(AstConstant* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstConstant * p)
visit_constant	interpreter_class.hpp	/^	void visit_constant(AstConstant* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstConstant * p)
visit_constant	visitor_class.hpp	/^	virtual void visit_constant(AstConstant* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstConstant * p)
visit_do_while	interpreter_class.cpp	/^void Interpreter::visit_do_while(AstDoWhile* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstDoWhile * p)
visit_do_while	interpreter_class.hpp	/^	void visit_do_while(AstDoWhile* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstDoWhile * p)
visit_do_while	visitor_class.hpp	/^	virtual void visit_do_while(AstDoWhile* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstDoWhile * p)
visit_ident	interpreter_class.cpp	/^void Interpreter::visit_ident(AstIdent* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIdent * p)
visit_ident	interpreter_class.hpp	/^	void visit_ident(AstIdent* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIdent * p)
visit_ident	visitor_class.hpp	/^	virtual void visit_ident(AstIdent* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIdent * p)
visit_if	interpreter_class.cpp	/^void Interpreter::visit_if(AstIf* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIf * p)
visit_if	interpreter_class.hpp	/^	void visit_if(AstIf* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIf * p)
visit_if	visitor_class.hpp	/^	virtual void visit_if(AstIf* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIf * p)
visit_if_chain	interpreter_class.cpp	/^void Interpreter::visit_if_chain(AstIfChain* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIfChain * p)
visit_if_chain	interpreter_class.hpp	/^	void visit_if_chain(AstIfChain* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIfChain * p)
visit_if_chain	visitor_class.hpp	/^	virtual void visit_if_chain(AstIfChain* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIfChain * p)
visit_index	interpreter_class.hpp	/^	void visit_index(AstIndex* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIndex * p)
visit_indexed_assign	interpreter_class.cpp	/^void Interpreter::visit_indexed_assign(AstIndexedAssign* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIndexedAssign * p)
visit_indexed_assign	interpreter_class.hpp	/^	void visit_indexed_assign(AstIndexedAssign* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIndexedAssign * p)
visit_indexed_assign	visitor_class.hpp	/^	virtual void visit_indexed_assign(AstIndexedAssign* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIndexedAssign * p)
visit_indexed_load	interpreter_class.cpp	/^void Interpreter::visit_indexed_load(AstIndexedLoad* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstIndexedLoad * p)
visit_indexed_load	interpreter_class.hpp	/^	void visit_indexed_load(AstIndexedLoad* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstIndexedLoad * p)
visit_indexed_load	visitor_class.hpp	/^	virtual void visit_indexed_load(AstIndexedLoad* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstIndexedLoad * p)
visit_list_ident	interpreter_class.cpp	/^void Interpreter::visit_list_ident(AstListIdent* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstListIdent * p)
visit_list_ident	interpreter_class.hpp	/^	void visit_list_ident(AstListIdent* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstListIdent * p)
visit_list_ident	visitor_class.hpp	/^	virtual void visit_list_ident(AstListIdent* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstListIdent * p)
visit_list_statement	interpreter_class.cpp	/^void Interpreter::visit_list_statement(AstListStatement* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstListStatement * p)
visit_list_statement	interpreter_class.hpp	/^	void visit_list_statement(AstListStatement* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstListStatement * p)
visit_list_statement	visitor_class.hpp	/^	virtual void visit_list_statement(AstListStatement* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstListStatement * p)
visit_load	interpreter_class.cpp	/^void Interpreter::visit_load(AstLoad* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstLoad * p)
visit_load	interpreter_class.hpp	/^	void visit_load(AstLoad* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstLoad * p)
visit_load	visitor_class.hpp	/^	virtual void visit_load(AstLoad* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstLoad * p)
visit_mk_scope	interpreter_class.cpp	/^void Interpreter::visit_mk_scope(AstMkScope* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstMkScope * p)
visit_mk_scope	interpreter_class.hpp	/^	void visit_mk_scope(AstMkScope* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstMkScope * p)
visit_mk_scope	visitor_class.hpp	/^	virtual void visit_mk_scope(AstMkScope* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstMkScope * p)
visit_multi_var_decl	interpreter_class.cpp	/^void Interpreter::visit_multi_var_decl(AstMultiVarDecl* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstMultiVarDecl * p)
visit_multi_var_decl	interpreter_class.hpp	/^	void visit_multi_var_decl(AstMultiVarDecl* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstMultiVarDecl * p)
visit_multi_var_decl	visitor_class.hpp	/^	virtual void visit_multi_var_decl(AstMultiVarDecl* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstMultiVarDecl * p)
visit_program	interpreter_class.cpp	/^void Interpreter::visit_program(AstProgram* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstProgram * p)
visit_program	interpreter_class.hpp	/^	void visit_program(AstProgram* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstProgram * p)
visit_program	visitor_class.hpp	/^	virtual void visit_program(AstProgram* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstProgram * p)
visit_rm_scope	interpreter_class.cpp	/^void Interpreter::visit_rm_scope(AstRmScope* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstRmScope * p)
visit_rm_scope	interpreter_class.hpp	/^	void visit_rm_scope(AstRmScope* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstRmScope * p)
visit_rm_scope	visitor_class.hpp	/^	virtual void visit_rm_scope(AstRmScope* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstRmScope * p)
visit_statements	interpreter_class.cpp	/^void Interpreter::visit_statements(AstStatements* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstStatements * p)
visit_statements	interpreter_class.hpp	/^	void visit_statements(AstStatements* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstStatements * p)
visit_statements	visitor_class.hpp	/^	virtual void visit_statements(AstStatements* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstStatements * p)
visit_var_decl_array	interpreter_class.cpp	/^void Interpreter::visit_var_decl_array(AstVarDeclArray* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstVarDeclArray * p)
visit_var_decl_array	interpreter_class.hpp	/^	void visit_var_decl_array(AstVarDeclArray* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstVarDeclArray * p)
visit_var_decl_array	visitor_class.hpp	/^	virtual void visit_var_decl_array(AstVarDeclArray* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstVarDeclArray * p)
visit_var_decl_simple	interpreter_class.cpp	/^void Interpreter::visit_var_decl_simple(AstVarDeclSimple* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstVarDeclSimple * p)
visit_var_decl_simple	interpreter_class.hpp	/^	void visit_var_decl_simple(AstVarDeclSimple* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstVarDeclSimple * p)
visit_var_decl_simple	visitor_class.hpp	/^	virtual void visit_var_decl_simple(AstVarDeclSimple* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstVarDeclSimple * p)
visit_var_decl_with_init	interpreter_class.cpp	/^void Interpreter::visit_var_decl_with_init(AstVarDeclWithInit* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstVarDeclWithInit * p)
visit_var_decl_with_init	interpreter_class.hpp	/^	void visit_var_decl_with_init(AstVarDeclWithInit* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstVarDeclWithInit * p)
visit_var_decl_with_init	visitor_class.hpp	/^	virtual void visit_var_decl_with_init(AstVarDeclWithInit* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstVarDeclWithInit * p)
visit_while	interpreter_class.cpp	/^void Interpreter::visit_while(AstWhile* p)$/;"	kind:f	class:Interpreter	typeref:typename:void	signature:(AstWhile * p)
visit_while	interpreter_class.hpp	/^	void visit_while(AstWhile* p);$/;"	kind:p	class:Interpreter	typeref:typename:void	access:public	signature:(AstWhile * p)
visit_while	visitor_class.hpp	/^	virtual void visit_while(AstWhile* p) = 0;$/;"	kind:p	class:Visitor	typeref:typename:void	access:public	signature:(AstWhile * p)
visitor_class_hpp	visitor_class.hpp	/^#define visitor_class_hpp$/;"	kind:d
vt_is_any_special_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	bool vt_is_any_special_endpoint(const value_type& vt) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt) const
vt_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	bool vt_is_special_first_endpoint(const value_type& vt,$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt,val_typ_pair & which) const
vt_is_special_first_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool vt_is_special_first_endpoint(const value_type& vt) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt) const
vt_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	bool vt_is_special_second_endpoint(const value_type& vt,$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt,val_typ_pair & which) const
vt_is_special_second_endpoint	liborangepower_src/str_split_helper_classes.hpp	/^	inline bool vt_is_special_second_endpoint(const value_type& vt) const$/;"	kind:f	class:liborangepower::strings::StrSplitHelperBase	typeref:typename:bool	access:protected	signature:(const value_type & vt) const
width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::Array2dHelper	typeref:typename:size_t	access:public	signature:() const
width	liborangepower_src/array_2d_helper_classes.hpp	/^	size_t width() const$/;"	kind:f	class:liborangepower::containers::ArrayCsz2dHelper	typeref:typename:size_t	access:public	signature:() const
width_to_msb_pos	liborangepower_src/misc_defines.hpp	/^#define width_to_msb_pos(/;"	kind:d	signature:(some_width)
write_json	liborangepower_src/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder, std::ostream& os, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
write_json	liborangepower_src/json_stuff.cpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(const std::string& output_file_name, $/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(const std::string & output_file_name,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^inline void write_json(std::ostream& os, Json::Value* root)$/;"	kind:f	namespace:liborangepower::json	typeref:typename:void	signature:(std::ostream & os,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,const std::string & output_file_name,Json::Value * root)
write_json	liborangepower_src/json_stuff.hpp	/^void write_json(Json::StreamWriterBuilder* wbuilder,$/;"	kind:p	namespace:liborangepower::json	typeref:typename:void	signature:(Json::StreamWriterBuilder * wbuilder,std::ostream & os,Json::Value * root)
x	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
y	liborangepower_src/vec2_classes.hpp	/^	Type x, y;$/;"	kind:m	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public
zcross_prod	liborangepower_src/vec2_classes.hpp	/^	inline Type zcross_prod(const Vec2<OtherType>& to_zcross) const$/;"	kind:f	class:liborangepower::containers::Vec2	typeref:typename:Type	access:public	signature:(const Vec2<OtherType> & to_zcross) const
~AbstractSyntaxTree	abstract_syntax_tree_class.cpp	/^AbstractSyntaxTree::~AbstractSyntaxTree()$/;"	kind:f	class:AbstractSyntaxTree	signature:()
~AbstractSyntaxTree	abstract_syntax_tree_class.hpp	/^	virtual ~AbstractSyntaxTree();$/;"	kind:p	class:AbstractSyntaxTree	access:public	signature:()
~AstNode	ast_node_classes.cpp	/^AstNode::~AstNode()$/;"	kind:f	class:AstNode	signature:()
~AstNode	ast_node_classes.hpp	/^	virtual ~AstNode();$/;"	kind:p	class:AstNode	access:public	signature:()
~ScopedIdentTable	scoped_ident_table_class.hpp	/^	virtual ~ScopedIdentTable()$/;"	kind:f	class:ScopedIdentTable	access:public	signature:()
~SymbolTable	symbol_table_class.cpp	/^SymbolTable::~SymbolTable()$/;"	kind:f	class:SymbolTable	signature:()
~SymbolTable	symbol_table_class.hpp	/^	virtual ~SymbolTable();$/;"	kind:p	class:SymbolTable	access:public	signature:()
~Visitor	visitor_class.hpp	/^	virtual ~Visitor()$/;"	kind:f	class:Visitor	access:public	signature:()
