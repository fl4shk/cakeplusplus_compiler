For simplicity, this is a stack machine.
It uses byte addressing.
The basic integer type is implemented as int64_t.

However, compares, divisions, and remainders can be made to act as if both
arguments are uint64_t.

Other types of integers are supported for loads and stores.


Registers:
  pc:   program counter
  sp:   stack pointer
  fp:   frame pointer (points to the start of the stack frame)


Stack frame:
  fp - arg_space - 8:     return value

  fp - arg_space:         arguments to this specific call of the function, 
                          in reverse order.  
                          Example:  For a function with two arguments, the
                          first argument to the function is at (fp - 8),
                          and the second argument to the function is at 
                          (fp - 16).

  fp:                     return address
  fp + 8:                 old fp
  fp + 16:                local variables of this specific call of the
                          function
  fp + 16 + var_space:    temporaries


Pseudo-code describing instructions:
  // This instruction puts a constant value onto the stack
  // 
  // Instruction name:  "const", 
  // takes argument called "immediate".
  // 
  // Arguments inside the parentheses are encoded directly into the
  // instruction.
  // 
  // Implementation psuedo code goes into the {...}
  const(immediate):   
    {
      // Inside these {...} you can see implementation notes.
      push(immediate);
    }

  // Immediate encoded here as a uint32_t
  const_u32(immediate):
    {
      push(zero_extend_32(immediate));
    }

  // Immediate encoded here as an int32_t
  const_s32(immediate):
    {
      push(sign_extend_32(immediate));
    }

  // Immediate encoded here as a uint16_t
  const_u16(immediate):
    {
      push(zero_extend_16(immediate));
    }

  // Immediate encoded here as an int16_t
  const_s16(immediate):
    {
      push(sign_extend_16(immediate));
    }

  // Immediate encoded here as a uint8_t
  const_u8(immediate):
    {
      push(zero_extend_8(immediate));
    }

  // Immediate encoded here as an int8_t
  const_s8(immediate):
    {
      push(sign_extend_8(immediate));
    }


  // This instruction pushes the address of the first argument to the
  // function onto the stack, which can be used for a load, or even a store
  // if one so desires.  Using an argument's address for a store could be
  // useful to save space that otherwise would have been allocated for
  // local variables.
  // 
  // Note that if there are no arguments to this function, the "arg"
  // instruction will actually push the address of the function's return
  // value onto the stack, which could be performed as a simple
  // optimization.
  arg:
    {
      // (fp - 8) is the address of the first argument (if there are any).
      push(fp - 8);
    }

  // The "x" in "argx" is short for "indexed".  This instruction can also
  // be used for accessing the the address of the function's return value.
  argx:
    {
      push(fp - 8 + pop());
    }

  // Push (the address of the first local variable) onto the stack.
  var:
    {
      push(fp + 16);
    }

  // Push (the address of the first local variable) + (some number popped
  // off the top of the stack) onto the stack.  This is useful for
  // indexing operations; it speeds up address calculation compared to
  // using just the "var" instruction.
  varx:
    {
      push(fp + 16 + pop());
    }

  // Push the program counter onto the stack (possibly useful for
  // performing PC-relative loads, or perhaps performing complicated jump
  // calculations)
  get_pc:
    {
      push(pc);
    }

  // Just a basic unconditional jump.  For flexibility, this instruction
  // pops the destination address off the top of the stck.
  jump:
    {
      pc = pop();
    }

  // Branch if equal to zero (with 64-bit offset encoded directly into
  // the instruction)
  beq(offset):
    {
      val = pop();

      if (val == 0)
      {
        pc = pc + offset;
      }
    }

  // Branch if not equal to zero (with 64-bit offset encoded directly into
  // the instruction)
  bne(offset):
    {
      val = pop();

      if (val != 0)
      {
        pc = pc + offset;
      }
    }

  // Branch if equal to zero (signed 16-bit offset)
  beq_near(offset)
    {
      val = pop();

      if (val == 0)
      {
        pc = pc + sign_extend_16(offset);
      }

    }
  // Branch if not equal to zero (signed 16-bit range)
  bne_near(offset)
    {
      val = pop();

      if (val != 0)
      {
        pc = pc + sign_extend_16(offset);
      }

    }

  // Function call (pops address off the top of the stack)
  call:
    {
      address = pop();
      push(pc);
      old_fp = fp;
      fp = sp;
      push(old_fp);
    }

  ret:
    {
      return_sequence();
    }


  // Load from memory or store to memory
  // 
  // Valid <type>'s are as follows:
  // basic (64-bit load/store)
  // u32 (unsigned 32-bit load/store)
  // s32 (signed 32-bit load/store)
  // u16 (unsigned 16-bit load/store)
  // s16 (signed 16-bit load/store)
  // u8 (unsigned 8-bit load/store)
  // s8 (signed 8-bit load/store)
  ld_<type>:
    {
      base = pop();
      push((s64)*((type*)(&mem[base])));
    }
  ldx_<type>:
    {
      index = pop();
      base = pop();
      push((s64)*((type*)(&mem[base + index])));
    }
  st_<type>:
    {
      data = pop();
      base = pop();
      *((type*)(&mem[base])) = data;
    }
  stx_<type>:
    {
      data = pop();
      index = pop();
      base = pop();
      *((type*)(&mem[base + index])) = data;
    }

  // Just a basic "add this number to the stack pointer".  Useful for
  // allocating local variables, and also for deallocating local variables.
  // Note that for allocating small amounts of space with an allocation
  // amount that is a multiple of 8 bytes, it may be preferrable to use
  // const(), const_u32(), const_u8(), etc. since these adjust the stack
  // pointer as well.
  // 
  // const_u8(0) (or const_s8(0)) is the recommended way to allocate space
  // for the return value of a function before calling said function.
  add_to_sp:
    {
      a = pop();
      sp = sp + a;
    }

  // Binary operators
  add:
    {
      b = pop();
      a = pop();

      push(a + b);
    }
  sub:
    {
      b = pop();
      a = pop();

      push(a - b);
    }
  mul:
    {
      b = pop();
      a = pop();

      push(a * b);
    }

  // Unsigned division
  udiv:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a / b);
    }

  // Signed division
  sdiv:
    {
      b = pop();
      a = pop();

      push(a / b);
    }

  // Unsigned modulo (remainder)
  umod:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a % b);
    }

  // Signed modulo (remainder)
  smod:
    {
      b = pop();
      a = pop();

      push(a % b);
    }


  // Bitwise AND
  bit_and:
    {
      b = pop();
      a = pop();

      push(a & b);
    }

  // Bitwise OR
  bit_or:
    {
      b = pop();
      a = pop();

      push(a | b);
    }

  // Bitwise XOR
  bit_xor:
    {
      b = pop();
      a = pop();

      push(a ^ b);
    }

  // Logical shift left
  bit_lsl:
    {
      b = pop();
      a = pop();

      push(a << b);
    }

  // Logical shift right
  bit_lsr:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a >> b);
    }

  // Arithmetic shift right
  bit_asr:
    {
      b = pop();
      a = pop();

      push(a >> b);
    }


  // ==
  cmp_eq:
    {
      b = pop();
      a = pop();

      push(a == b);
    }

  // !=
  cmp_ne:
    {
      b = pop();
      a = pop();

      push(a != b);
    }

  // unsigned <
  cmp_ult:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a < b);
    }
  
  // signed <
  cmp_slt:
    {
      b = pop();
      a = pop();

      push(a < b);
    }

  // unsigned >
  cmp_ugt:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a > b);
    }

  // signed >
  cmp_sgt:
    {
      b = pop();
      a = pop();

      push(a > b);
    }

  // unsigned <=
  cmp_ule:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a <= b);
    }

  // signed <=
  cmp_sle:
    {
      b = pop();
      a = pop();

      push(a <= b);
    }

  // unsigned >=
  cmp_uge:
    {
      const u64 b = pop();
      const u64 a = pop();

      push(a >= b);
    }

  // signed >=
  cmp_sge:
    {
      b = pop();
      a = pop();

      push(a >= b);
    }


  // System call
  syscall:
    {
      exec_syscall(pop());
    }
    // Specific system calls:
    {
      // Display 64-bit integer
      disp_num:
        {
          cout << pop();
        }
      disp_num_unsigned:
        {
          cout << (uint64_t)pop();
        }

      // Display character
      disp_char:
        {
          cout << (char)pop();
        }

      // Display string
      disp_str:
        {
          cout << ((const char*)(&mem[pop()]));
        }

      // Get 64-bit integer from standard input
      get_num:
        {
          s64 a;
          cin >> a;
          push(a);
        }
    }

  quit:
    {
      exit(pop());
    }
